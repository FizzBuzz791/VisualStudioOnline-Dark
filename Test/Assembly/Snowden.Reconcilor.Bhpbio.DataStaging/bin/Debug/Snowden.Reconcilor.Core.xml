<?xml version="1.0"?>
<doc>
<assembly>
<name>
Snowden.Reconcilor.Core
</name>
</assembly>
<members>
<member name="P:Snowden.Reconcilor.Core.Notification.UiNotifier`1.Connection">
	<summary>
 Returns an active connection.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.UiNotifier`1.DalNotification">
	<summary>
 Returns a notification dal.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.UiNotifier`1.InstanceId">
	<summary>
 Returns the instance id.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.UiNotifier`1.ReferenceHelper">
	<summary>
 Returns the instance of the reference helper.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.UiNotifier`1.GetUiSimpleMessageTemplate">
	<summary>
 Returns the body template.  Unless overridden this returns the content of "DefaultNotification.htm".
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.UiNotifier`1.GetUiSimpleMessageContent(System.Collections.Generic.IDictionary{System.String,System.String},`0,`0,`0,System.Nullable{Snowden.Reconcilor.Core.Notification.ThresholdState},Snowden.Reconcilor.Core.Notification.ThresholdState,System.Nullable{Snowden.Reconcilor.Core.Notification.TrendState})">
	<summary>
 Returns the body content through a structured series of replaceable tags.
 </summary>
	<param name="tags">The list of detected body tags that need to be filled.</param>
</member><member name="M:Snowden.Reconcilor.Core.Notification.UiNotifier`1.GetUiSimpleMessageText(`0,`0,`0,System.Nullable{Snowden.Reconcilor.Core.Notification.ThresholdState},Snowden.Reconcilor.Core.Notification.ThresholdState,System.Nullable{Snowden.Reconcilor.Core.Notification.TrendState})">
	<summary>
 Provides the body of the email message.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.UiNotifier`1.Initialise(System.Int32,Snowden.Reconcilor.Core.Notification.IDalNotification,Snowden.Common.Database.DataAccessBaseObjects.IDataAccessConnection)">
	<summary>
 Initialises the email notifier.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.UiAssistant.GetNotificationSimpleUiMessages">
	<summary>
 Returns an IDictionary collection of strings containing HTML formatted text indicating the 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.TypeRegistration.Notify(System.Nullable{Snowden.Reconcilor.Core.Notification.ThresholdState},Snowden.Reconcilor.Core.Notification.ThresholdState,System.Nullable{Snowden.Reconcilor.Core.Notification.TrendState})">
	<summary>
 Returns whether the states provided should attempt to raise a notification.
 </summary>
	<param name="previousState">The previous sample state.</param>
	<param name="currentState">The current sample state.</param>
	<param name="trend">The trend.</param>
	<returns>A boolean stating whether a notification should proceed.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.TypeRegistration.DisplayOnUi(System.Nullable{Snowden.Reconcilor.Core.Notification.ThresholdState},Snowden.Reconcilor.Core.Notification.ThresholdState,System.Nullable{Snowden.Reconcilor.Core.Notification.TrendState})">
	<summary>
 Returns whether the states provided should be shown on the UI.
 </summary>
	<param name="previousState">The previous sample state.</param>
	<param name="currentState">The current sample state.</param>
	<param name="trend">The trend.</param>
	<returns>A boolean stating whether a reminder should proceed.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.TypeRegistration.Remind(System.Nullable{Snowden.Reconcilor.Core.Notification.ThresholdState},Snowden.Reconcilor.Core.Notification.ThresholdState,System.Nullable{Snowden.Reconcilor.Core.Notification.TrendState})">
	<summary>
 Returns whether the states provided should attempt to raise a reminder.
 </summary>
	<param name="previousState">The previous sample state.</param>
	<param name="currentState">The current sample state.</param>
	<param name="trend">The trend.</param>
	<returns>A boolean stating whether a reminder should proceed.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.TypeRegistration.GetTypeRegistration(System.String,Snowden.Reconcilor.Core.Notification.IDalNotification)">
	<summary>
 Loads the returns the requested Type Registration settings.
 </summary>
	<param name="typeName">The notification type name.</param>
	<returns>The requested type registrations.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.TypeRegistration.Clear">
	<summary>
 Clears any cached Type Registrations.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.TypeRegistration">
	<summary>
 Provides a simple tracking mechanism for Types and States that this notification is interested in tracking.
 All types/states are registered within the database (dbo.NotificationTypeRegistration).
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.TrendState">
	<summary>
 Provides a summary of the trend.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.ThresholdState">
	<summary>
 Provides a summary of the threshold state.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.SimpleSerialiser.Serialise(System.Object,System.Type)">
	<summary>
 Performs XML Serialisation to a string.
 </summary>
	<param name="value">The object to serialise.</param>
	<returns>An string that contains the XML of the dehydrated object.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.SimpleSerialiser.Deserialise(System.String,System.Type)">
	<summary>
 Performs XML Deserialisation from a given XML string.
 </summary>
	<param name="serialisedObject">The string which represents the XML string.</param>
	<returns>The rehydrated object. If the string was not valid then this returns nothing.</returns>
</member><member name="P:Snowden.Reconcilor.Core.Notification.ReferenceHelper.DalNotification">
	<summary>
 Returns a new (or existing) notification instance.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.ReferenceHelper.DalUtility">
	<summary>
 Returns a new (or existing) notification instance.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.ReferenceHelper.Type">
	<summary>
 Returns a new (or existing) list of notification types.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.ReferenceHelper.SampleState">
	<summary>
 Returns a new (or existing) list of sample states.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.ReferenceHelper.SampleTrend">
	<summary>
 Returns a new (or existing) list of sample trends.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.ReferenceHelper.#ctor(Snowden.Common.Database.DataAccessBaseObjects.IDataAccessConnection)">
	<summary>
 Default constructor.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.ReferenceHelper.GetTrendDescription(Snowden.Reconcilor.Core.Notification.TrendState)">
	<summary>
 Returns the english description for the given trend.
 </summary>
	<param name="trend">The trend.</param>
	<returns>An english description.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.ReferenceHelper.GetSampleDescription(Snowden.Reconcilor.Core.Notification.ThresholdState)">
	<summary>
 Returns the english description for the given threshold state.
 </summary>
	<param name="state">The state.</param>
	<returns>An english description.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.ReferenceHelper.Dispose(System.Boolean)">
	<summary>
 Properly disposes of the instance.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.ReferenceHelper.Dispose">
	<summary>
 Properly disposes of the instance.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.ReferenceHelper.GetReferenceHelper(Snowden.Common.Database.DataAccessBaseObjects.IDataAccessConnection)">
	<summary>
 Returns a new (or existing) singleton instance of the reference helper class.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.ReferenceHelper.DisposeReferenceHelper">
	<summary>
 Properly disposes of the reference helper class if it is still in memory.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.ReferenceHelper">
	<summary>
 Provides singleton access to the reference data.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.RecalcValue">
	<summary>
 Stores the Recalc sample values.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.PlantValue">
	<summary>
 Stores the crusher sample values.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.NegativeStockpileValue">
	<summary>
 Stores the stockpile sample values.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.NegativeStockpileInstance.Load">
	<summary>
 Loads the configured stockpile instance data.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.MailAddress">
	<summary>
 Stores a simple mail address.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IUiNotifier`1.GetUiSimpleMessageText(`0,`0,`0,System.Nullable{Snowden.Reconcilor.Core.Notification.ThresholdState},Snowden.Reconcilor.Core.Notification.ThresholdState,System.Nullable{Snowden.Reconcilor.Core.Notification.TrendState})">
	<summary>
 Sends the notification.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.Instance`1.Rule">
	<summary>
 Defines the different rule processing models supported by a notification.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.Instance`1.Threshold">
	<summary>
 Expose this to sub classes so they can determine if necessary when to run certain checks.
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Snowden.Reconcilor.Core.Notification.Instance`1.InstanceId">
	<summary>
 Sets the instance Id.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.Instance`1.DalNotification">
	<summary>
 Provides access to the Notification Dal.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.Instance`1.Connection">
	<summary>
 Provides access to the shared Notification Connection.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Instance`1.Save">
	<summary>
 Saves the current notification state information.
 For those overriding this call: please be aware that "Stale" should be checked
 to ensure that the state information that you are saving is still valid.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Instance`1.Load">
	<summary>
 Loads the current notification and notification state information if it exists.
 </summary>
	<remarks>
 When overriding this class always ensure the base is called first!
 
 </remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Instance`1.GetNotifier">
	<summary>
 Provides an instance of the notifier used when a notification is sent.
 As a developer overriding this function you must ensure a valid notifier is sent.
 This can be as simple or as complex as you need.
 </summary>
	<returns>A notifier object.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Instance`1.GetSampleThresholdState(`0,`0)">
	<summary>
 Returns an summary of how the value interacts with the threshold provided.

 As a developer overriding this function you must ensure this value is correct.
 The value is used in later logic to determine if things are getting better or worse.
 Note that multiple values are treated as an aggregate; at the end of the day you must say
 whether things are good or bad and whether an email needs to be sent.  This solution (although simplistic)
 provides you with a lot of flexibility.  Note that if you find that all variables are truly independent
 consider splitting into separate notifications.
 </summary>
	<param name="value">The sample value.</param>
	<param name="threshold">The threshold value.</param>
	<returns>A threshold state which describes the value in relation to the threshold.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Instance`1.GetSampleTrendState(`0,`0)">
	<summary>
 Returns an summary of the trend of the previous and current sample values.
 
 As a developer overriding this function you must ensure this value is correct.
 The value is used in later logic to determine if things are getting better or worse.
 Note that multiple values are treated as an aggregate; at the end of the day you must say
 whether things are good or bad and whether an email needs to be sent.  This solution (although simplistic)
 provides you with a lot of flexibility.  Note that if you find that all variables are truly independent
 consider splitting into separate notifications.
 </summary>
	<param name="previous">The previous sample value.</param>
	<param name="current">The current sample value.</param>
	<returns>The trend between the previous and current sample value.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Instance`1.CollectSample">
	<summary>
 Collects the sample.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Instance`1.StateCheckRequired">
	<summary>
 Checks to see if the state of the notification needs to be checked.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Instance`1.Stale">
	<summary>
 Determines if the instance is stale.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Instance`1.GetSample">
	<summary>
 Collects the new sample value.
 When overriding this you will typically connect to the required subsystem and load error counts,
 KPI style figures, etc and store them in the required sample type.
 </summary>
	<returns>The new sample value.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Instance`1.NotificationRequired">
	<summary>
 Determines whether a notification is required.
 This evaluates the following:
 1. Whether the states/trends registered against this notification type should raise a notification.
 2. Whether this notification is simply a reminder and a reminder is/isn't current due.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Instance`1.SendNotification">
	<summary>
 Sends the notification.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.Instance`1">
	<summary>
 This is the base class for all Notifications.
 </summary>
	<typeparam name="T">
 The type of the notification value.
 This must be serializable in order to persist its state when the notification is shut down.
 </typeparam>
</member><member name="M:Snowden.Reconcilor.Core.Notification.INotifier`1.Initialise(System.Int32,Snowden.Reconcilor.Core.Notification.IDalNotification,Snowden.Common.Database.DataAccessBaseObjects.IDataAccessConnection)">
	<summary>
 Initialises the Notifier.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.INotifier`1.Notify(`0,`0,`0,System.Nullable{Snowden.Reconcilor.Core.Notification.ThresholdState},Snowden.Reconcilor.Core.Notification.ThresholdState,System.Nullable{Snowden.Reconcilor.Core.Notification.TrendState})">
	<summary>
 Sends the notification.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.ImportValue">
	<summary>
 Stores the import sample values.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.ImportInstance.Load">
	<summary>
 Loads the configured import instance data.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.ImportInstance.GetSample">
	<summary>
 Loads the import error count sample.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.ImportInstance">
	<summary>
 Supports an import notification instance.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IInstance.Initialise(System.Int32,System.String,Snowden.Common.Database.DataAccessBaseObjects.IDataAccessConnection,Snowden.Reconcilor.Core.Notification.IDalNotification)">
	<summary>
 Initialises the instance.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IInstance.Load">
	<summary>
 Loads the instance from the database.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IInstance.Save">
	<summary>
 Saves the instance state information to the database.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IInstance.CollectSample">
	<summary>
 Instructs the instance to collect a data sample.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IInstance.Stale">
	<summary>
 Checks to ensure the instance hasn't been modified.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IInstance.NotificationRequired">
	<summary>
 Checks to see if a notification is required.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IInstance.StateCheckRequired">
	<summary>
 Checks to see if we should check for a notification
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IInstance.SendNotification">
	<summary>
 Sends a notification.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IInstance.GetSimpleUiMessage">
	<summary>
 Gets a simple message 
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetInstance(System.Int32)">
	<summary>
 Provides detailed information for a particular instance.
 </summary>
	<param name="instanceId">The notification instance's id.</param>
	<returns>
 Returns a dataset with the following tables: Instance, InstanceState.
 </returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetInstanceAudit(System.Int32)">
	<summary>
 Provides extended information for an audit instance.
 </summary>
	<param name="instanceId">The notification instance's id.</param>
	<returns>Returns a datatable of extended information.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.DeleteInstanceState(System.Int32)">
	<summary>
 Deletes the notification instance state.
 </summary>
	<param name="instanceId"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetInstanceHaulage(System.Int32)">
	<summary>
 Provides extended information for a haulage instance.
 </summary>
	<param name="instanceId">The notification instance's id.</param>
	<returns>Returns a datatable of extended information.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetInstanceImport(System.Int32)">
	<summary>
 Provides extended information for a import instance.
 </summary>
	<param name="instanceId">The notification instance's id.</param>
	<returns>Returns a datatable of extended information.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetInstanceCrusher(System.Int32)">
	<summary>
 Provides extended information for a Crusher instance.
 </summary>
	<param name="instanceId">The notification instance's id.</param>
	<returns>Returns a datatable of extended information.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetInstancePlant(System.Int32)">
	<summary>
 Provides extended information for a Plant instance.
 </summary>
	<param name="instanceId">The notification instance's id.</param>
	<returns>Returns a datatable of extended information.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetInstanceNegativeStockpile(System.Int32)">
	<summary>
 Provides extended information for a negative stockpile instance
 </summary>
	<param name="instanceId">The notification instance's id.</param>
	<returns>Returns a datatable of extended information.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetInstances">
	<summary>
 Returns a list of notification instances.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.SaveInstanceState(System.Int32,System.String,System.String,System.DateTime)">
	<summary>
 Persists the notification instance's state.
 </summary>
	<param name="instanceId">The notification instance.</param>
	<param name="previousValue">The previous value (as XML).</param>
	<param name="currentValue">The current value (as XML).</param>
	<param name="lastNotified">The date of the last notification that was sent.</param>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.SaveInstanceEmailSubscription(System.Int32,System.String)">
	<summary>
 Saves an email address subscription
 </summary>
	<param name="instanceId"></param>
	<param name="email"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.DeleteInstanceEmailSubscription(System.Int32,System.String)">
	<summary>
 Deletes an email subscription associated with an instance
 </summary>
	<param name="instanceId"></param>
	<param name="email"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.DeleteInstanceUserSubscription(System.Int32,System.Int32)">
	<summary>
 Deletes a user subscription associated with an instance
 </summary>
	<param name="instanceId"></param>
	<param name="userId"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.SaveInstanceUserSubscription(System.Int32,System.Int32)">
	<summary>
 Saves a user subscription
 </summary>
	<param name="instanceId"></param>
	<param name="userId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetRecalcNotificationTransactions">
	<summary>
 Gets the transactions required to determine if a notification needs to be raised.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetTypeRegistration(System.String)">
	<summary>
 Returns the list of event registrations for this notification type.
 </summary>
	<param name="typeName">The notification type.</param>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.AddInstance(System.String,System.String,System.String,System.String,System.Int16,System.Int32,System.Int32,System.Int32,System.String)">
	<summary>
 Adds a new notification instance.
 </summary>
	<param name="typeName">The notification type's name.</param>
	<param name="name">The instance's name.</param>
	<param name="description">An english description of what the instance is and does.</param>
	<param name="reminder">Whether reminders should be sent.</param>
	<param name="reminderMinutes">How many minutes should elapse when sending reminders.</param>
	<param name="checkStateMinutes">How many minutes should elapse between running checks.</param>
	<param name="ownerUserId">The owner's user id.</param>
	<param name="threshold">The threshold value (as XML).</param>
	<returns>Returns the new instance's id.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.UpdateInstance(System.Int32,System.Int16,System.String,System.Int16,System.String,System.Int16,System.String,System.Int16,System.Int16,System.Int16,System.Int32,System.Int16,System.Int32,System.Int16,System.Int32,System.Int16,System.String)">
	<summary>
 Updates an existing notification existing.
 </summary>
	<param name="instanceId">The instance's id.</param>
	<param name="updateName">Whether to update the instance name.</param>
	<param name="name">The instance name.</param>
	<param name="updateDescription">Whether to udpate the instance description.</param>
	<param name="description">The instance description.</param>
	<param name="updateReminder">Whether to update the reminder flag.</param>
	<param name="reminder">The reminder flag.</param>
	<param name="updateReminderMinutes">Whether to update the reminder minutes.</param>
	<param name="reminderMinutes">The reminder minutes.</param>
	<param name="updateCheckStateMinutes">Whether to update the check state minutes.</param>
	<param name="checkStateMinutes">The check state minutes.</param>
	<param name="updateOwnerUserId">Whether to update the owner user id.</param>
	<param name="ownerUserId">The owner user id.</param>
	<param name="updateThreshold">Whether to update the threshold.</param>
	<param name="threshold">The threshold.</param>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.ActivateInstance(System.Int32)">
	<summary>
 Activates the specified notification instance.
 </summary>
	<param name="instanceId">The instance's id.</param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.DeactivateInstance(System.Int32)">
	<summary>
 Deactivates the specified notification instance.
 </summary>
	<param name="instanceId">The instance's id.</param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.SaveInstanceHaulage(System.Int32,System.Int32)">
	<summary>
 Saves the instance's haulage details.
 </summary>
	<param name="instanceId">The instance's id.</param>
	<param name="locationId">The location id that is associated with the haulage raw.</param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.SaveInstanceImport(System.Int32,System.Int32)">
	<summary>
 Saves the instance's import details
 </summary>
	<param name="instanceId">The instance's id</param>
	<param name="importId">The import id for the import.</param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.SaveInstanceAudit(System.Int32,System.Int32,System.Int32)">
	<summary>
 Saves the instance's audit details
 </summary>
	<param name="instanceId"></param>
	<param name="auditTypeId"></param>
	<param name="auditTypeGroupId"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.SaveInstanceCrusher(System.Int32,System.String,System.Int32)">
	<summary>
 Saves the instance's crusher details
 </summary>
	<param name="instanceId">The instance's id</param>
	<param name="crusherId">The crusher id for the crusher.</param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.SaveInstancePlant(System.Int32,System.String,System.Int32)">
	<summary>
 Saves the instance's plant details
 </summary>
	<param name="instanceId">The instance's id</param>
	<param name="plantId">The plant id for the plant.</param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.SaveInstanceNegativeStockpile(System.Int32,System.String,System.Int32,System.String,System.Int32)">
	<summary>
 Save's the instance's negative stockpile details
 </summary>
	<param name="instanceId">The instance's id</param>
	<param name="stockpileId">The stockpile id to monitor for negative balances</param>
	<param name="stockpileGroupId">The stockpile group id to monitor for negative balances.</param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetInstanceSubscription(System.Int32)">
	<summary>
 Returns a list of subscriptions.
 </summary>
	<param name="instanceId">The notification instance's id.</param>
	<returns>A list of subscriptions: User, NonUserEmailOnly.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetInstanceOwner(System.Int32)">
	<summary>
 Returns the owner of an instance.
 </summary>
	<param name="instanceId">The notification instance's id.</param>
	<returns>The owner's details (currently EmailAddress only).</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetTypeDefaultRules(System.Int32)">
	<summary>
 Returns the default rules for a particular notification type.
 </summary>
	<param name="typeId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetTypes">
	<summary>
 Returns a list of notification types.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetSampleTrends">
	<summary>
 Returns a list of notification trends.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetSampleStates">
	<summary>
 Returns a list of notification threshold states.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.GetInstanceVersion(System.Int32)">
	<summary>
 Returns the version data for the instance.
 This is an optimised routine.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.IDalNotification.DeleteInstance(System.Int32)">
	<summary>
 Deletes a notification instance.
 </summary>
	<param name="instanceId"></param>
	<remarks></remarks>
</member><member name="T:Snowden.Reconcilor.Core.Notification.HaulageValue">
	<summary>
 Stores the haulage sample values.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.HaulageInstance.Load">
	<summary>
 Loads the configured haulage instance data.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.HaulageInstance.GetSample">
	<summary>
 Loads a haulage error count sample.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.HaulageInstance">
	<summary>
 Supports a haulage notification instance.
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.EmailNotifierSettings">
	<summary>
 Simply stores the security configuration for an email notifier.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.Connection">
	<summary>
 Returns an active connection.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.DalNotification">
	<summary>
 Returns a notification dal.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.InstanceId">
	<summary>
 Returns the instance id.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.ReferenceHelper">
	<summary>
 Returns the instance of the reference helper.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.Initialise(System.Int32,Snowden.Reconcilor.Core.Notification.IDalNotification,Snowden.Common.Database.DataAccessBaseObjects.IDataAccessConnection)">
	<summary>
 Initialises the email notifier.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.GetFrom">
	<summary>
 Provides the "From" sender for the email.
 The "From" is collected from the notification instance configuration.
 You won't normally need to override this unless you have any specific custom requirements.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.GetTo">
	<summary>
 Provides the "To" recipients for the email.
 The "To" is collected from the notification instance subscription configuration.
 You won't normally need to override this unless you have any specific custom requirements.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.GetSubject(`0,`0,`0)">
	<summary>
 Provides the subject line for an email.
 The default is to return a very simple subject line built from the notification configuration.
 You will likely need to override this to provide more detailed information.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.GetBodyTemplate">
	<summary>
 Returns the body template.  Unless overridden this returns the content of "DefaultNotification.htm".
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.GetBodyContent(System.Collections.Generic.IDictionary{System.String,System.String},`0,`0,`0,System.Nullable{Snowden.Reconcilor.Core.Notification.ThresholdState},Snowden.Reconcilor.Core.Notification.ThresholdState,System.Nullable{Snowden.Reconcilor.Core.Notification.TrendState})">
	<summary>
 Returns the body content through a structured series of replaceable tags.
 </summary>
	<param name="tags">The list of detected body tags that need to be filled.</param>
</member><member name="M:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.GetBody(`0,`0,`0,System.Nullable{Snowden.Reconcilor.Core.Notification.ThresholdState},Snowden.Reconcilor.Core.Notification.ThresholdState,System.Nullable{Snowden.Reconcilor.Core.Notification.TrendState},System.Collections.Generic.IDictionary{Snowden.Reconcilor.Core.Notification.MailAddress,System.String})">
	<summary>
 Provides the body of the email message.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.GetSystemBodyContent(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{Snowden.Reconcilor.Core.Notification.MailAddress,System.String})">
	<summary>
 This is not meant to be overriden; it simply provides feedback on any problems encountered with
 sending messages, etc.  anything defined by a notification type should really have it defined
 in its own body.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.Notify(`0,`0,`0,System.Nullable{Snowden.Reconcilor.Core.Notification.ThresholdState},Snowden.Reconcilor.Core.Notification.ThresholdState,System.Nullable{Snowden.Reconcilor.Core.Notification.TrendState})">
	<summary>
 Sends the Notification.
 </summary>
	<param name="previous"></param>
	<param name="current"></param>
	<param name="threshold"></param>
	<remarks>
 The 'DebuggerNonUserCode' has been set to suppress critical exceptions from
 interrupting debug sessions.
 </remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.AddToMailAddress(System.Net.Mail.MailMessage,Snowden.Reconcilor.Core.Notification.MailAddress,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{Snowden.Reconcilor.Core.Notification.MailAddress,System.String})">
	<remarks>
 The 'DebuggerNonUserCode' has been set to suppress critical exceptions from
 interrupting debug sessions.
 </remarks>
</member><member name="M:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.AddFromMailAddress(System.Net.Mail.MailMessage,Snowden.Reconcilor.Core.Notification.MailAddress,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IDictionary{Snowden.Reconcilor.Core.Notification.MailAddress,System.String})">
	<remarks>
 The 'DebuggerNonUserCode' has been set to suppress critical exceptions from
 interrupting debug sessions.
 </remarks>
</member><member name="P:Snowden.Reconcilor.Core.Notification.EmailNotifier`1.GetSettings">
	<summary>
 Loads the product configuration settings into an equivalent notifier settings class
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.Notification.EmailNotifier`1">
	<summary>
 Performs a direct email notification without any queueing.
 </summary>
	<typeparam name="T">The data type to be represented within the email's body.</typeparam>
	<remarks>
 This revision is very simple and has the following configuration:
 1. Does not support credentials.
 2. Does not support SSL.
 3. HTML delivery only.
 4. Normal priority.
 5. Network TCP/IP SMTP based delivery (rather than local IIS folder drops, MAPI, etc).
 </remarks>
</member><member name="T:Snowden.Reconcilor.Core.Notification.CrusherValue">
	<summary>
 Stores the crusher sample values.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Coordinator.Initialise(System.String,Snowden.Bcd.ProductConfiguration.ConfigurationManager)">
	<summary>
 Starts up the coordinator by loading all instances ready to run.
 </summary>
	<param name="connectionString">The connection string used for all notification requests.</param>
</member><member name="P:Snowden.Reconcilor.Core.Notification.Coordinator.ProductConfiguration">
	<summary>
 Provides access to the product configuration class.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Coordinator.GetInstanceList">
	<summary>
 Returns a list of instances that should be running/loaded.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Coordinator.RunOnce">
	<summary>
 Runs all instances once.  Each instance collects a new sample,
 sends a notification as required and persists its current state.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Coordinator.Shutdown">
	<summary>
 Shuts down the coordinator.  All instances are destroyed.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Coordinator.Dispose">
	<summary>
 Correctly disposes the instance.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Coordinator.GetCoordinator(Snowden.Reconcilor.Core.Notification.NotificationFactory)">
	<summary>
 Represents a process class which is responsible for coordinating all notification instances.
 </summary>
	<param name="notificationFactory">The notification factory to use when creating new notification types.</param>
	<returns>The singleton Coordinator instance.</returns>
</member><member name="T:Snowden.Reconcilor.Core.Notification.Coordinator">
	<summary>
 Provides "coordination" functionality for all notification instances.
 Provided as a singleton.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Comparer.SimpleThresholdComparer(System.IComparable,System.IComparable,System.Boolean)">
	<summary>
 Determines the state based on the sampled value and the threshold.
 This is meant to be used on the values stored WITHIN the type defined by T, not T itself.
 </summary>
	<param name="value">The sampled value.</param>
	<param name="threshold">The threshold value.</param>
	<param name="positiveBelowThreshold">Whether being below the threshold is positive/good.</param>
	<returns>An analysis of the state.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Notification.Comparer.SimpleTrendComparer(System.IComparable,System.IComparable,System.Boolean)">
	<summary>
 Determines the trend based on the current and previous sampled values.
 This is meant to be used on the values stored WITHIN the type defined by T, not T itself.
 </summary>
	<param name="previous">The previous sampled value.</param>
	<param name="current">The current sampled value.</param>
	<param name="positiveBelowThreshold">Whether being below the threshold is positive/good.</param>
	<returns>An analysis of the state.</returns>
</member><member name="T:Snowden.Reconcilor.Core.Notification.AuditValue">
	<summary>
 Stores the audit sample values.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.GradePercentageScale.ColumnExpressionFieldName">
	<summary>
 Field name that will be used to calculate the column expression
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Snowden.Reconcilor.Core.GradePercentageScale.ColumnExpressionString">
	<summary>
 Returns a column expression that applies the formula. This may not always be possible.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.GradePercentageScale.PercentageFieldName">
	<summary>
 Determines the field to pull the percentage value to scale off
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.GradePercentageScale.GradePrefix">
	<summary>
 Prefix on Grade Name that determines the grades to use for this calculation
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.GradePercentageScale.CalculationType">
	<summary>
 Will return what type of calculation it is
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.GradePercentageScale.CoreBackCalculateSupport">
	<summary>
 Returns whether or not the calculation can be implemented at core level because it supports the necessary data types that will be passed from the core.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.GradePercentageScale.CoreCalculateSupport">
	<summary>
 Returns whether or not the calculation can be implemented at core level because it supports the necessary data types that will be passed from the core.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.GradePercentageScale.FieldName">
	<summary>
 The field name to apply the calculation to. Can be blank if it is to be applied to all fields of its type.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.GradePercentageScale.BackCalculate(System.Double,System.Double)">
	<summary>
 Back calculates the grade to be stored into the database
 </summary>
	<param name="percentageValue">Value of the percentage</param>
	<param name="gradeValue">Value of the grade</param>
</member><member name="M:Snowden.Reconcilor.Core.GradePercentageScale.BackCalculate(Snowden.Reconcilor.Core.GradeCalculationRequest)">
	<summary>
 Back calculates the grade to be stored into the database
 </summary>
	<param name="formulaData">Instance of GradeCalculationRequest to be disected</param>
</member><member name="M:Snowden.Reconcilor.Core.GradePercentageScale.BackCalculate(System.Object)">
	<summary>
 Back calculate the formula from an end result value to the original value.
 </summary>
	<param name="formulaData">The formula data</param>
</member><member name="M:Snowden.Reconcilor.Core.GradePercentageScale.Calculate(System.Double,System.Double)">
	<summary>
 Calculates the grade to be displayed to the UI
 </summary>
	<param name="percentageValue">Value of the percentage</param>
	<param name="gradeValue">Value of the grade</param>
</member><member name="M:Snowden.Reconcilor.Core.GradePercentageScale.Calculate(Snowden.Reconcilor.Core.GradeCalculationRequest)">
	<summary>
 Calculates the grade to be displayed to the UI
 </summary>
	<param name="formulaData">Instance of GradeCalculationRequest to be disected</param>
</member><member name="M:Snowden.Reconcilor.Core.GradePercentageScale.Calculate(System.Object)">
	<summary>
 Calculates the formula value based on the given formula data.
 </summary>
	<param name="formulaData">The formula data.</param>
	<returns>The calculated value</returns>
</member><member name="M:Snowden.Reconcilor.Core.GradePercentageScale.CalculateDataSet(System.Data.DataTable)">
	<summary>
 Performs calculation against dataset and records the data against the fields that 
 contain the grade prefix
 </summary>
	<param name="formulaData">The data table to be calculated against.</param>
</member><member name="M:Snowden.Reconcilor.Core.GradePercentageScale.CalculateDataSet(System.Object)">
	<summary>
 Applies formula calculation to the entire data table. 
 </summary>
	<param name="formulaData">The datatable to calculate against.</param>
</member><member name="P:Snowden.Reconcilor.Core.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Snowden.Reconcilor.Core.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:Snowden.Reconcilor.Core.My.Resources.Resources.DefaultNotification">
	<summary>
  Looks up a localized string similar to &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" &gt;
&lt;head&gt;
    &lt;title&gt;{Name}&lt;/title&gt;
    &lt;style type="text/css"&gt;
        body 
        {
            margin: 0px;
            background-color: #F5F7F8;
            font-family: Arial, Sans-Serif;
            font-size: 12px;
            color: black;
        }
        a 
        {	
            color: #294158;	
        }
        td.contentHeader
        [rest of string was truncated]";.
</summary>
</member><member name="P:Snowden.Reconcilor.Core.My.Resources.Resources.DefaultNotificationSimpleUiMessage">
	<summary>
  Looks up a localized string similar to {SimpleUiMessage}.
</summary>
</member><member name="T:Snowden.Reconcilor.Core.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:Snowden.Reconcilor.Core.Grade.Id">
	<summary>
 Gets or sets the Grade Id (Grade_ID).
 </summary>
	<value>The Grade Id.</value>
</member><member name="P:Snowden.Reconcilor.Core.Grade.IsVisible">
	<summary>
 Gets or sets the Visible flag
 </summary>
	<value>The visible flag</value>
</member><member name="P:Snowden.Reconcilor.Core.Grade.Name">
	<summary>
 Gets or sets the Grade Name (Grade_Name).
 </summary>
	<value>The Grade Name.</value>
</member><member name="P:Snowden.Reconcilor.Core.Grade.Description">
	<summary>
 Gets or sets the Grade Description (Description).
 </summary>
	<value>The Grade Description.</value>
</member><member name="P:Snowden.Reconcilor.Core.Grade.OrderNumber">
	<summary>
 Gets or sets the Grade Order Number (Order_No).
 </summary>
	<value>The Order Number.</value>
</member><member name="P:Snowden.Reconcilor.Core.Grade.Units">
	<summary>
 Gets or sets the Grade Units (Units).
 </summary>
	<value>The Grade Units.</value>
</member><member name="P:Snowden.Reconcilor.Core.Grade.Precision">
	<summary>
 Gets or sets the Display Precision (Display_Precision).
 </summary>
	<value>The Display Precision.</value>
</member><member name="P:Snowden.Reconcilor.Core.Grade.Format">
	<summary>
 Gets or sets the Display Format (Display_Format).
 </summary>
	<value>The Display Format.</value>
</member><member name="P:Snowden.Reconcilor.Core.Grade.Type">
	<summary>
 Gets or sets the Type.
 </summary>
	<value>The Type.</value>
</member><member name="P:Snowden.Reconcilor.Core.Grade.DefaultNumericFormat">
	<summary>
 Gets or sets the default numeric format.
 </summary>
	<value>The default numeric format.</value>
</member><member name="M:Snowden.Reconcilor.Core.Grade.#ctor(System.Data.DataRow,System.String)">
	<summary>
 Initializes a new instance of the Grade class.
 </summary>
	<param name="row">The source dataset row.</param>
	<param name="numericFormat">The numeric format for return values.</param>
</member><member name="M:Snowden.Reconcilor.Core.Grade.SetNumericFormatDecimalPlaces(System.Int32)">
	<summary>
 Sets the numeric format decimal places.
 </summary>
	<param name="numberOfDecimalPlaces">The number of decimal places.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Grade.ToString(System.Single,System.Boolean)">
	<summary>
 Converts a value to a string using the configured grade format.
 </summary>
	<param name="gradeValue">The grade value to convert.</param>
	<param name="includeUnits">If set to "True", returns the value's least significant digits.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Grade.ToString(System.Single)">
	<summary>
 Converts a value to a string using the configured grade format.
 </summary>
	<param name="gradeValue">The grade value to convert.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Grade.ToString(System.Object)">
	<summary>
 Converts a value to a string using the configured grade format. 
 Handles Null checking and returns blank when Null.
 </summary>
	<param name="gradeValue">The grade value to convert.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Grade.CalculateSigificantFigures(System.Double,System.Int32)">
	<summary>
 Calculates the sigificant figures.
 </summary>
	<param name="originalNumber">The original number.</param>
	<param name="significantFigures">The significant figures.</param>
	<returns></returns>
</member><member name="T:Snowden.Reconcilor.Core.Grade">
	<summary>
 A class that defines a Grade record
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.IFormulaCalculation.ColumnExpressionString">
	<summary>
 Returns a column expression that applies the formula. This may not always be possible.
 </summary>
	<value>The column expression string.</value>
</member><member name="P:Snowden.Reconcilor.Core.IFormulaCalculation.CoreCalculateSupport">
	<summary>
 Returns whether or not the calculation can be implemented at core level because it supports the necessary data types that will be passed from the core.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.IFormulaCalculation.CalculationType">
	<summary>
 Will return what type of calculation it is
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.IFormulaCalculation.FieldName">
	<summary>
 The field name to apply the calculation to. Can be blank if it is to be applied to all fields of its type.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.IFormulaCalculation.CoreBackCalculateSupport">
	<summary>
 Returns whether or not the calculation can be implemented at core level because it supports the necessary data types that will be passed from the core.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.IFormulaCalculation.BackCalculate(System.Object)">
	<summary>
 Back calculate the formula from an end result value to the original precalculated value.
 </summary>
	<param name="formulaData">The formula data.</param>
	<returns>The original precalculated value</returns>
</member><member name="M:Snowden.Reconcilor.Core.IFormulaCalculation.Calculate(System.Object)">
	<summary>
 Calculates the formula value based on the given formula data.
 </summary>
	<param name="formulaData">The formula data.</param>
	<returns>The calculated value</returns>
</member><member name="M:Snowden.Reconcilor.Core.IFormulaCalculation.CalculateDataSet(System.Object)">
	<summary>
 Applies formula calculation to the entire dataset or data table.
 </summary>
	<param name="formulaData">The formula data.</param>
</member><member name="T:Snowden.Reconcilor.Core.IFormulaCalculation">
	<summary>
 Interface used to expose formula calculations
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.GradeCalculationRequest.GradeName">
	<summary>
 Name of the grade that the formula is being run for
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.GradeCalculationRequest.WebRequest">
	<summary>
 HttpRequest object passed from the web
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.GradeCalculationRequest.RequestPrefix">
	<summary>
 Prefix on any request item
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.GradeCalculationRequest.GetRequestValue(System.String)">
	<summary>
 Returns a value from the web request object
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.GradeCalculationRequest">
	<summary>
 Core grade request class that is handled by core supported formula calculations
 </summary>
</member><member name="F:Snowden.Reconcilor.Core.FormulaCalculationType.SingleGradeType">
	<summary>
 Requires a single value to provide calculation against a grade
 </summary>
</member><member name="F:Snowden.Reconcilor.Core.FormulaCalculationType.CompoundGradeType">
	<summary>
 Requires multiple values to provide calculation a grade
 </summary>
</member><member name="T:Snowden.Reconcilor.Core.FormulaCalculationType">
	<summary>
 Defines the types of formula calculations handled by Reconcilor.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.FluidityCalculation.ColumnExpressionString">
	<summary>
 Returns a column expression that applies the formula. This may not always be possible.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.FluidityCalculation.FieldName">
	<summary>
 The field name to apply the calculation to. Can be blank if it is to be applied to all fields of its type.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.FluidityCalculation.CoreBackCalculateSupport">
	<summary>
 Returns whether or not the calculation can be implemented at core level because it supports the necessary data types that will be passed from the core.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.FluidityCalculation.CoreCalculateSupport">
	<summary>
 Returns whether or not the calculation can be implemented at core level because it supports the necessary data types that will be passed from the core.
 </summary>
</member><member name="P:Snowden.Reconcilor.Core.FluidityCalculation.CalculationType">
	<summary>
 Will return what type of calculation it is
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.FluidityCalculation.BackCalculate(System.Single)">
	<summary>
 Back calculates the grade to be stored into the database
 </summary>
	<param name="fluidity">The fluidity value</param>
</member><member name="M:Snowden.Reconcilor.Core.FluidityCalculation.BackCalculate(System.Object)">
	<summary>
 Back calculate the formula from an end result value to the original value.
 </summary>
	<param name="formulaData">The fludiity value as a numeric</param>
	<returns>The log10 of the fludity value passed</returns>
</member><member name="M:Snowden.Reconcilor.Core.FluidityCalculation.Calculate(System.Single)">
	<summary>
 Calculates the grade to be shown on the UI
 </summary>
	<param name="fluidity">The fluidity value</param>
</member><member name="M:Snowden.Reconcilor.Core.FluidityCalculation.Calculate(System.Object)">
	<summary>
 Calculates the formula value based on the given formula data.
 </summary>
	<param name="formulaData">The formula data.</param>
	<returns>The calculated value</returns>
</member><member name="M:Snowden.Reconcilor.Core.FluidityCalculation.CalculateDataSet(System.Data.DataTable)">
	<summary>
 Performs calculation against dataset and records the data against the fields that 
 contain the grade prefix
 </summary>
	<param name="formulaData">The data table to be calculated against.</param>
</member><member name="M:Snowden.Reconcilor.Core.FluidityCalculation.CalculateDataSet(System.Object)">
	<summary>
 Applies formula calculation to the entire data table. 
 Records values against the fluidity column name specified.
 </summary>
	<param name="formulaData">The datatable to calculate against.</param>
</member><member name="T:Snowden.Reconcilor.Core.FluidityCalculation">
	<summary>
 Works out the display value and the value stored in the database for the Fluidity grade
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Database.SqlDal.SqlDalImportAutoQueue.GetActiveImportAutoQueueProfiles">
	<summary>
 Gets the set of active (not disabled) Import Auto-Queue Profiles
 </summary>
	<returns>DataTable containing details of active profiles</returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.SqlDal.SqlDalImportAutoQueue.GetImportJobStatusList">
	<summary>
 Gets the set of import job statuses
 </summary>
	<returns>A DataTable containing job status list entries</returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.SqlDal.SqlDalImportAutoQueue.GetCountOfImportJobsForImportIdAndStatus(System.Int32,System.Int32,System.DateTime)">
	<summary>
 Gets the count of import jobs for an import that currently have the specified stats
 </summary>
	<param name="importId">Identifies the import to check running status for</param>
	<param name="importJobStatusId">Specifies the status to count jobs for</param>
	<param name="cutoffDateTime">Specifies a cutoff time (prior to which jobs will not be counted)</param>
	<returns>Returns the count of import jobs with the specified status</returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.SqlDal.SqlDalImportAutoQueue.GetLatestImportJobActivityDateForImport(System.Int32,System.DateTime)">
	<summary>
 Gets the latest import job activity for a specified import
 </summary>
	<param name="importId">Identifies the import to check</param>
	<param name="cutoffDate">the cutoff date, prior to which no activity records will be searched</param>
	<returns>The Date and Time of last import job activity for the specified import (if any)</returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.SqlDal.SqlDalImportAutoQueue.AddImportJob(System.Int32,System.Int32,System.Int32)">
	<summary>
 Adds an import job for a specified import
 </summary>
	<param name="importId">Identifies the import to add a job for</param>
	<param name="importJobStatusId">Status id to initialise for the new job</param>
	<param name="priority">Priority to be set for the new job</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.SqlDal.SqlDalImportAutoQueue.AddImportJobForAutoQueueProfile(System.Int32)">
	<summary>
 Add an ImportJob for the specified Auto Queue Profile Id
 </summary>
	<param name="importAutoQueueProfileId">Id of the ImportAutoQueueProfile</param>
	<remarks>The Import Job will be added with the parameters defined for the auto-queue profile, with default parameters if no parameters are explicitly defined</remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.SqlDal.SqlDalImportAutoQueue.GetImportAutoQueueProfileRequired(System.Int32,System.Int32)">
	<summary>
 Determines whether an import auto-queue profile is required
 </summary>
	<param name="importAutoQueueProfileId">Id of the ImportAutoQueueProfile</param>
	<param name="missedScheduleCatchupMinutes">The number of minutes that can elapse passed a schedule due date before the due time should be considered missed</param>
	<returns>True if an import for this profile is required; false otherwise</returns>
</member><member name="T:Snowden.Reconcilor.Core.Database.SqlDal.SqlDalImportAutoQueue">
	<summary>
 DAL class for Import Auto-Queue checks and operations
 </summary>
	<remarks>This is required for the ImportAutoQueueAgent</remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.SqlDalBase.#ctor">
	<summary>
 Initializes a new instance of the class.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.SqlDalBase.#ctor(System.String)">
	<summary>
 Initializes a new instance of the class.
 </summary>
	<param name="connectionString">The connection string.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.SqlDalBase.#ctor(System.Data.IDbConnection)">
	<summary>
 Initializes a new instance of the class.
 </summary>
	<param name="databaseConnection">The connection object.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddDataException(System.Int32,System.DateTime,System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Adds a data exception record.
 </summary>
	<param name="dataExceptionTypeId">The data exception type id.</param>
	<param name="dataExceptionDate">The data exception date.</param>
	<param name="dataExceptionShift">The data exception shift.</param>
	<param name="dataExceptionStatusId">The data exception status id. Max length of 5.</param>
	<param name="shortDescription">The short description. Max length of 255.</param>
	<param name="longDescription">The long description. Max length of 4096.</param>
	<param name="detailsXml">The details XML.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddDrill(System.String,System.String)">
	<summary>
 Adds a drill record.
 </summary>
	<param name="drillId">The drill id. Max length of 31.</param>
	<param name="description">The description. Max length of 255.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddLocation(System.String,System.Int16,System.Int32,System.String)">
	<summary>
 Adds a location record.
 </summary>
	<param name="name">The name. Max length of 31.</param>
	<param name="locationTypeId">The parent location type id.</param>
	<param name="parentLocationId">The parent location id.</param>
	<param name="description">The description. Max length of 255.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddLocationType(System.Int16,System.String)">
	<summary>
 Adds a location type record.
 </summary>
	<param name="parentLocationTypeId">The parent location type id. Max length of 31.</param>
	<param name="description">The description. Max length of 255.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddMaterialType(System.String,System.String,System.String,System.Int16,System.Int32,System.Single,System.Int32,System.String,System.Int32)">
	<summary>
 Adds a material type record.
 </summary>
	<param name="description">The description. Max length of 63.</param>
	<param name="abbreviation">The abbreviation. Max length of 15.</param>
	<param name="isWaste">True of False.</param>
	<param name="materialTypeGroupId">The material type group id.</param>
	<param name="densityConversionFactor">The density conversion factor.</param>
	<param name="orderNo">The order no.</param>
	<param name="materialCategoryId">The material category</param>
	<param name="parentMaterialTypeId">The parent material type id</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddMaterialType(System.String,System.String,System.Int16,System.Int32,System.Single,System.Int32,System.String,System.Int32)">
	<summary>
 Adds a material type record.
 </summary>
	<param name="description">The description. Max length of 63.</param>
	<param name="abbreviation">The abbreviation. Max length of 15.</param>
	<param name="isWaste">True of False.</param>
	<param name="materialTypeGroupId">The material type group id.</param>
	<param name="densityConversionFactor">The density conversion factor.</param>
	<param name="orderNo">The order no.</param>
	<param name="materialCategoryId">The material category</param>
	<param name="parentMaterialTypeId">The parent material type id</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddMaterialTypeGroup(System.String,System.String,System.Int32,System.Int16,System.Int16)">
	<summary>
 Adds a material type group record.
 </summary>
	<param name="name">The name. Max length of 63.</param>
	<param name="description">The description. Max length of 255.</param>
	<param name="orderNo">The order no.</param>
	<param name="isDigblockGroup">True of False.</param>
	<param name="isStockpileGroup">True of False.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddMaterialTypeWasteTypePeriod(System.Int32,System.String,System.Int16,System.DateTime)">
	<summary>
 Adds a material type waste type period record.
 </summary>
	<param name="materialTypeId">The material type id.</param>
	<param name="wasteTypeId">The waste type id. Max length of 31.</param>
	<param name="isWaste">True of False.</param>
	<param name="startDate">The start date.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddMaterialTypeLocation(System.Int32,System.Int32)">
	<summary>
 Adds a material type location record
 </summary>
	<param name="materialTypeId">The material type id</param>
	<param name="locationId">The location with which this material type is associated</param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddOrUpdateMaterialTypeNotes(System.Int32,System.String,System.String,System.Int32)">
	<summary>
 Adds a material type notes record
 </summary>
	<param name="materialTypeId">The material type id</param>
	<param name="materialTypeFieldId">The notes field name</param>
	<param name="notes">The notes</param>
	<param name="orderNo">The order number to add it in</param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddMaterialCategory(System.String,System.String,System.String)">
	<summary>
 Adds a material category
 </summary>
	<param name="materialCategoryId"></param>
	<param name="parentMaterialCategoryId"></param>
	<param name="description"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddObjectNotes(System.String,System.String,System.String)">
	<summary>
 Adds object notes.
 </summary>
	<param name="objectId">The object id. Max length of 31.</param>
	<param name="notes">The notes. Max length of 8000.</param>
	<param name="description">The description. Max length of 255.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddOrUpdateUserInterfaceListingField(System.Int32,System.String,System.String,System.Int16,System.Int16,System.Int32,System.Int32)">
	<summary>
 Adds or updates user interface listing field records.
 </summary>
	<param name="userInterfaceListingId">The user interface listing id.</param>
	<param name="fieldName">Name of the field. Max length of 255.</param>
	<param name="displayName">The display name. Max length of 63.</param>
	<param name="isVisible">True of False.</param>
	<param name="sumField">The sum field.</param>
	<param name="pixelWidth">Width of the pixel.</param>
	<param name="orderNo">The order no.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddStockpileGroup(System.String,System.String,System.Int32)">
	<summary>
 Adds a stockpile group record.
 </summary>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
	<param name="description">The description. Max length of 255.</param>
	<param name="orderNo">The order no.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddStockpileGroupStockpile(System.String,System.Int32)">
	<summary>
 Adds a stockpile group stockpile record.
 </summary>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
	<param name="stockpileId">The stockpile id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddTruck(System.String,System.Int32,System.String)">
	<summary>
 Adds a truck record.
 </summary>
	<param name="truckId">The truck id. Max length of 31.</param>
	<param name="truckTypeId">The truck type id.</param>
	<param name="description">The description. Max length of 255.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddTruckType(System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int16)">
	<summary>
 Adds a truck type record.
 </summary>
	<param name="name">The name. Max length of 63.</param>
	<param name="description">The description. Max length of 255.</param>
	<param name="maxTonnes">The max tonnes.</param>
	<param name="aveTonnes">The ave tonnes.</param>
	<param name="minTonnes">The min tonnes.</param>
	<param name="isDefault">True or False.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddTruckTypeFactorPeriod(System.Int32,System.DateTime,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
	<summary>
 Adds a truck type factor period record.
 </summary>
	<param name="truckTypeId">The truck type id.</param>
	<param name="startDate">The start date.</param>
	<param name="maxTonnes">The max tonnes.</param>
	<param name="aveTonnes">The ave tonnes.</param>
	<param name="minTonnes">The min tonnes.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddWasteType(System.String,System.String)">
	<summary>
 Adds a waste type record.
 </summary>
	<param name="wasteTypeId">The waste type id. Max length of 31.</param>
	<param name="description">The description. Max length of 255.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddOrUpdateWeightometerSampleGrade(System.Int32,System.Int32,System.Single)">
	<summary>
 Adds or updates weightometer sample grade records.
 </summary>
	<param name="weightometerSampleId">The weightometer sample id.</param>
	<param name="gradeId">The grade id.</param>
	<param name="gradeValue">The grade value.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddOrUpdateWeightometerSampleNotes(System.Int32,System.String,System.String)">
	<summary>
 Adds or updates weightometer sample note records.
 </summary>
	<param name="weightometerSampleId">The weightometer sample id.</param>
	<param name="weightometerSampleFieldId">The weightometer sample field id.</param>
	<param name="notes">The notes value.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddOrUpdateWeightometerSampleValue(System.Int32,System.String,System.Single)">
	<summary>
 Adds or updates weightometer sample note records.
 </summary>
	<param name="weightometerSampleId">The weightometer sample id.</param>
	<param name="weightometerSampleFieldId">The weightometer sample field id.</param>
	<param name="fieldValue">The field value.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddWeightometerSample(System.String,System.DateTime,System.String,System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
	<summary>
 Adds a weightometer sample record.
 </summary>
	<param name="weightometerId">The weightometer id. Max length of 31.</param>
	<param name="sampleDate">The sample date.</param>
	<param name="sampleShift">The sample shift.</param>
	<param name="orderNo">The order no.</param>
	<param name="tonnes">The tonnes.</param>
	<param name="correctedTonnes">The corrected tonnes.</param>
	<param name="sourceStockpileId">The source stockpile id.</param>
	<param name="destinationStockpileId">The destination stockpile id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.ApproveMonth(System.DateTime)">
	<summary>
 Approves a month.
 </summary>
	<param name="monthlyApprovalMonth">The monthly approval month.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteDrill(System.String)">
	<summary>
 Deletes a drill record.
 </summary>
	<param name="drillId">The drill id. Max length of 31.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteInvalidMovement(System.Int32)">
	<summary>
 Deletes an invalid movement definition.
 </summary>
	<param name="invalidMovementId"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteOverrideRecord(System.Int64)">
	<summary>
 Deletes a Override flag
 </summary>
	<param name="importSyncRowId"> The importSyncRowId</param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteMaterialCategory(System.String)">
	<summary>
 Deletes a material category
 </summary>
	<param name="materialCategoryId"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.TryDeleteLocation(System.Int32,System.String,System.Int16,System.String,System.Boolean@,System.String@)">
	<summary>
 Deletes a location record.
 </summary>
	<param name="locationId">The location id.</param>
	<param name="name">The name. Max length of 31.</param>
	<param name="locationTypeId">The location type id. Max length of 31.</param>
	<param name="parentLocationName">Name of the parent location. Max length of 31.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteLocation(System.Int32,System.String,System.Int16,System.String)">
	<summary>
 Deletes a location record.
 </summary>
	<param name="locationId">The location id.</param>
	<param name="name">The name. Max length of 31.</param>
	<param name="locationTypeId">The location type id. Max length of 31.</param>
	<param name="parentLocationName">Name of the parent location. Max length of 31.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteLocationType(System.Int16)">
	<summary>
 Deletes location type records.
 </summary>
	<param name="locationTypeId">The location type id. Max length of 31.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteMaterialType(System.Int32)">
	<summary>
 Deletes material type records.
 </summary>
	<param name="materialTypeId">The material type id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteMaterialTypeGroup(System.Int32)">
	<summary>
 Deletes material type group records.
 </summary>
	<param name="materialTypeGroupId">The material type group id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteMaterialTypeWasteTypePeriod(System.Int32,System.String)">
	<summary>
 Deletes material type waste type period records.
 </summary>
	<param name="materialTypeId">The material type id.</param>
	<param name="wasteTypeId">The waste type id. Max length of 31.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteObjectNotes(System.String)">
	<summary>
 Deletes object notes records.
 </summary>
	<param name="objectId">The object id. Max length of 31.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteStockpileGroup(System.String)">
	<summary>
 Deletes stockpile group records.
 </summary>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteStockpileGroupStockpile(System.String,System.Int32)">
	<summary>
 Deletes stockpile group stockpile records.
 </summary>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
	<param name="stockpileId">The stockpile id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteStockpileGroupStockpileAll(System.String)">
	<summary>
 Deletes all stockpile group stockpile records.
 </summary>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteTruck(System.String)">
	<summary>
 Deletes truck records.
 </summary>
	<param name="truckId">The truck id. Max length of 31.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteTruckType(System.Int32)">
	<summary>
 Deletes truck type records.
 </summary>
	<param name="truckTypeId">The truck type id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteTruckTypeFactorPeriod(System.Int32)">
	<summary>
 Deletes truck type factor period records.
 </summary>
	<param name="truckTypeId">The truck type id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteWasteType(System.String)">
	<summary>
 Deletes waste type records.
 </summary>
	<param name="wasteTypeId">The waste type id. Max length of 31.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteWeightometerSample(System.Int32,System.String,System.DateTime,System.String,System.Int32)">
	<summary>
 Deletes weightometer sample records.
 </summary>
	<param name="weightometerSampleId">The weightometer sample id. Max length of 31.</param>
	<param name="weightometerId">The weightometer id.</param>
	<param name="sampleDate">The sample date.</param>
	<param name="sampleShift">The sample shift.</param>
	<param name="orderNo">The order no.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetDataException(System.Int32)">
	<summary>
 Returns a data exception.
 </summary>
	<param name="dataExceptionId">The data exception id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetDataExceptionCount">
	<summary>
 Returns the number of data exceptions.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetDataExceptionList(System.Int32,System.String)">
	<summary>
 Returns a list of data exceptions.
 </summary>
	<param name="dataExceptionTypeId">The data exception type id.</param>
	<param name="dataExceptionStatusId">The data exception status id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetDataExceptionList(System.Int32,System.String,System.Boolean)">
	<summary>
 Returns a list of data exceptions.
 </summary>
	<param name="dataExceptionTypeId">The data exception type id.</param>
	<param name="dataExceptionStatusId">The data exception status id.</param>
	<param name="excludeResolved">Whether or not to exclude already resolved records.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetDataExceptionFilteredList(System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Int32)">
	<summary>
 Returns a list of data exceptions that match the specified filter conditions
 </summary>
	<param name="includeActive">If true, active data exceptions will be included in the filter</param>
	<param name="includeDismissed">If true, dismissed data exceptions will be included in the filter</param>
	<param name="includeResolved">If true, resolved data exceptions will be included in the filter</param>
	<param name="dateFrom">If specified, only data exceptions with a date on or after this value will be returned</param>
	<param name="dateTo">If specified, only data exceptions with a date on or prior to this value will be returned</param>
	<param name="dataExceptionTypeId">If specified, only data exceptions with the type Id specified will match the filter</param>
	<param name="descriptionContains">If specified, only data exceptions with a short or long description that contains the description text will match the filter</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetDataExceptionStatusList(System.String)">
	<param name="dataExceptionStatusId">The data exception status id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetDataExceptionTypeFilteredList(System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String)">
	<summary>
 Returns a list of  data exception types.
 </summary>
	<param name="includeActive">If true, active data exceptions will be included in the filter</param>
	<param name="includeDismissed">If true, dismissed data exceptions will be included in the filter</param>
	<param name="includeResolved">If true, resolved data exceptions will be included in the filter</param>
	<param name="dateFrom">If specified, only data exceptions with a date on or after this value will be returned</param>
	<param name="dateTo">If specified, only data exceptions with a date on or prior to this value will be returned</param>
	<param name="dataExceptionTypeId">If specified, only data exceptions with the type Id specified will match the filter</param>
	<param name="descriptionContains">If specified, only data exceptions with a short or long description that contains the description text will match the filter</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetDataExceptionTypeList">
	<summary>
 Returns a list of  data exception types
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetDrill(System.String)">
	<summary>
 Returns a drill record.
 </summary>
	<param name="drillId">The drill id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetDrillList">
	<summary>
 Returns a list of drill records.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetGrade(System.Int16)">
	<summary>
 Returns grade records.
 </summary>
	<param name="gradeId">The grade id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetGradeList(System.Int16)">
	<summary>
 Returns a list of grades.
 </summary>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetGradeList(System.Int16,System.String)">
	<summary>
 Returns a list of grades.
 </summary>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<param name="gradeType">Filters grades to Grade Type. Can be Null.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetInvalidMovementDefinition(System.Int32)">
	<summary>
 Returns invalid movement definition record.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetInvalidMovementDefinitionList">
	<summary>
 Returns list of invalid movement definitions
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetInvalidMovementTypeList(System.Boolean,System.Boolean)">
	<summary>
 Returns list of invalid movement types
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetListBasedOnInvalidMovementType(System.Int32)">
	<summary>
 Get a list of crushers, digblocks, material types, plants, stockpiles or stockpile groups based on the type
 </summary>
	<param name="invalidMovementTypeId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.SaveInvalidMovementDefinition(System.Int32,System.String,System.Int32,System.String,System.Int32,System.String)">
	<summary>
 Persists invalid movement definition to database.
 </summary>
	<param name="invalidMovementDefinitionId"></param>
	<param name="definitionName"></param>
	<param name="sourceTypeId"></param>
	<param name="sourceId"></param>
	<param name="destinationTypeId"></param>
	<param name="destinationId"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetLocation(System.Int32)">
	<summary>
 Returns location records.
 </summary>
	<param name="locationId">The location id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetLocationList(System.Int16,System.Int32,System.Int32,System.Int16)">
	<summary>
 Returns a list of locations.
 </summary>
	<param name="normalList">The normal list.</param>
	<param name="parentLocationId">The parent location id.</param>
	<param name="locationId">The location id.</param>
	<param name="locationTypeId">The location type id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetLocationList(System.Int16,System.Int32,System.Int32,System.Int16,System.Int16)">
	<summary>
 Returns a list of locations.
 </summary>
	<param name="normalList">The normal list.</param>
	<param name="parentLocationId">The parent location id.</param>
	<param name="locationId">The location id.</param>
	<param name="locationTypeId">The location type id.</param>
	<param name="orderByName">Order returned list by name</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetLocationParentHeirarchy(System.Int32)">
	<summary>
 Returns the location parent heirarchy.
 </summary>
	<param name="locationId">The location id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetLocationType(System.Int16)">
	<summary>
 Returns a location type.
 </summary>
	<param name="locationTypeId">The location type id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetLocationTypeList(System.Int16)">
	<summary>
 Returns a list of location types.
 </summary>
	<param name="parentLocationTypeId">The parent location type id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetLocationTypeParentList(System.Int16,System.String)">
	<summary>
 Returns a list of parent location types.
 </summary>
	<param name="locationTypeId">The parent location type id.</param>
	<param name="locationTypeDescription">The parent location type description Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetLocationTypeList(System.Int16,System.Int16)">
	<summary>
 Returns a list of location types.
 </summary>
	<param name="parentLocationTypeId">The parent location type id. Max length of 31.</param>
	<param name="defines3dPoint">Whether the location type defines a 3d point. Null returns all.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetMaterialType(System.Int32)">
	<summary>
 Returns material type records.
 </summary>
	<param name="materialTypeId">The material type id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetMaterialCategory(System.String)">
	<summary>
 Returns a material category
 </summary>
	<param name="materialCategoryId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetMaterialCategoryList(System.String)">
	<summary>
 Returns a list of material categories
 </summary>
	<param name="parentMaterialCategoryId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetMaterialTypeGroup(System.Int32)">
	<summary>
 Returns material type group records.
 </summary>
	<param name="materialTypeGroupId">The material type group id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetMaterialTypeGroupList">
	<summary>
 Returns a list of material type group records.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetMaterialTypeList(System.Int16,System.Int16,System.Int32,System.String,System.Int32)">
	<summary>
 Returns a list of material types.
 </summary>
	<param name="isDigblockGroup">True or False.</param>
	<param name="isStockpileGroup">True of False.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetMaterialTypeNotes(System.Int32,System.String)">
	<summary>
 Returns the material type notes value
 </summary>
	<param name="materialTypeId"></param>
	<param name="materialTypeFieldId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetMaterialTypeWasteTypePeriodList(System.Int32,System.String)">
	<summary>
 Returns a list of material type waste type period records.
 </summary>
	<param name="materialTypeId">The material type id.</param>
	<param name="wasteTypeId">The waste type id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetMaterialTypeWasteTypePeriodMaterialTypeSummary(System.Int32)">
	<summary>
 Returns a summary of material type waste type period material type records.
 </summary>
	<param name="materialTypeId">The material type id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetMonthlyApprovalMonth(System.DateTime@,System.DateTime@,System.DateTime@)">
	<summary>
 Returns monthly approval month records.
 </summary>
	<param name="lastApprovedMonth">The last approved month.</param>
	<param name="approvalMonth">The approval month.</param>
	<param name="firstMonth">The first month.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetObjectNotes(System.String)">
	<summary>
 Returns object notes.
 </summary>
	<param name="objectId">The object id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetObjectNotesList">
	<summary>
 Returns a list of object notes records.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetReconcilorYearList">
	<summary>
 Returns a list of years that have data inside of reconcilor.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetSettingList">
	<summary>
 Returns a list of settings.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetSetting(System.String)">
	<summary>
 Returns setting if it exists.
 </summary>
	<param name="settingId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetShiftTypeList">
	<summary>
 Returns a list of shift type records.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetStockpileGroup(System.String)">
	<summary>
 Returns stockpile group records.
 </summary>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetStockpileGroupList(System.Int16,System.Int16)">
	<summary>
 Returns a list of stockpile group records.
 </summary>
	<param name="displayStockpileDescriptions">The display stockpile descriptions.</param>
	<param name="displayInvisible">True or False.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetStockpileGroupStockpileList(System.String,System.Int16,System.Int32)">
	<summary>
 Returns a list of stockpile group stockpile records.
 </summary>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
	<param name="isIncluded">True or False.</param>
	<param name="stockpileId">The stockpile id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetStockpileGroupStockpileList(System.String,System.Int16,System.Int32,System.Int16,System.Int32,System.Int16)">
	<summary>
 Returns a list of stockpile group stockpile records.
 </summary>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
	<param name="isIncluded">True or False.</param>
	<param name="stockpileId">The stockpile id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetSystemSetting(System.String)">
	<summary>
 Returns a system setting record.
 </summary>
	<param name="settingId">The setting id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetTerminologyList(System.String)">
	<summary>
 Returns a list of terminology records.
 </summary>
	<param name="terminologyId">The terminology id. Max length of 255.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetTruck(System.String)">
	<summary>
 Returns truck records.
 </summary>
	<param name="truckId">The truck id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetTruckList">
	<summary>
 Returns a list of truck records.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetTruckType(System.Int32)">
	<summary>
 Returns truck types.
 </summary>
	<param name="truckTypeId">The truck type id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetTruckTypeList">
	<summary>
 Returns a list of truck types.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetTruckTypeFactorPeriodList(System.Int32)">
	<summary>
 Returns a list of truck type factor period records.
 </summary>
	<param name="truckTypeId">The truck type id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetUserInterfaceListingFieldList(System.Int32,System.Int16)">
	<summary>
 Returns user interface listing field list.
 </summary>
	<param name="userInterfaceListingId">The user interface listing id.</param>
	<param name="ignoreEmptyCheck">True or False.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetUserInterfaceListingList">
	<summary>
 Returns user interface listing list.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetUserInterfaceListingTabList(System.String)">
	<summary>
 Returns user interface listing tab list.
 </summary>
	<param name="userInterfaceListingTabId">The user interface listing tab id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetWasteType(System.String)">
	<summary>
 Returns waste type records.
 </summary>
	<param name="wasteTypeId">The waste type id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetWasteTypeList">
	<summary>
 Returns a list of waste type records.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetWeightometerSample(System.Int32)">
	<summary>
 Returns weightometer sample records.
 </summary>
	<param name="weightometerSampleId">The weightometer sample id.</param>
	<returns>Returns two tables: Data and Grades.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetWeightometerSample(System.Int32,System.Int16)">
	<summary>
 Returns weightometer sample records.
 </summary>
	<param name="weightometerSampleId">The weightometer sample id.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns>Returns two tables: Data and Grades.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetWeightometerSampleList(System.String,System.DateTime,System.DateTime,System.Int16,System.Int32,System.Int32)">
	<summary>
 Returns a list of weightometer sample records.
 </summary>
	<param name="weightometerId">The weightometer id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="hideInvisibleWeightometers">True or False.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetWeightometerSampleList(System.String,System.DateTime,System.DateTime,System.Int16,System.Int32,System.Int32,System.Int16)">
	<summary>
 Returns a list of weightometer sample records.
 </summary>
	<param name="weightometerId">The weightometer id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="hideInvisibleWeightometers">True or False.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetWeightometerSampleListPivoted(System.String,System.DateTime,System.DateTime,System.Int16,System.Int32,System.Int32)">
	<summary>
 Returns a list of pivoted weightometer sample records.
 </summary>
	<param name="weightometerId">The weightometer id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="hideInvisibleWeightometers">The hide invisible weightometers.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetImportRevision(System.Int32)">
	<summary>
 Returns a details of Import Revision Details.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetImportRevisionList">
	<summary>
 Returns a list of Import Type List.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetMappingImportTypeList(System.Int32)">
	<summary>
 Returns a list of Load ImportName List.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetImportMappingDestinationList(System.Int32)">
	<summary>
 Returns a Destination Column list.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetImportMappingDestinationGradeList(System.Int32)">
	<summary>
 Returns a Grade Destination Column list.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetImportMappingList">
	<summary>
 Returns a list of Import Mapping List.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetImportRevisionDetails(System.Int32)">
	<summary>
 Get Revision Information
 </summary>
	<param name="MappingRevisionId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddImportMappingRevision(System.Int32,System.Int32,System.String,System.String,System.Int32@)">
	<summary>
 Add Import Mapping Revision
 </summary>
	<param name="MappingId"></param>
	<param name="ImportId"></param>
	<param name="RevisionName"></param>
	<param name="MappingRevisionId">Output value</param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.AddOrUpdateImportMappingData(System.Int32,System.Int32,System.String,System.String,System.Int16)">
	<summary>
 Add or Update Import Mapping  Data
 </summary>
	<param name="MappingTypeId"></param>
	<param name="MappingRevisionId"></param>
	<param name="SourceField"></param>
	<param name="DestinationField"></param>
	<param name="IsPrimaryKey"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.DeleteImportMappingRevision(System.Int32)">
	<summary>
 Delete Import Mapping Revision
 </summary>
	<param name="MappingRevisionId"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateImportMappingRevision(System.Int32,System.Int32,System.String)">
	<summary>
 Update ImportMappingRevision
 </summary>
	<param name="MappingRevisionId"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateDataException(System.Int32,System.Int32,System.Int16,System.DateTime,System.Int16,System.String,System.Int16,System.String,System.Int16,System.String,System.Int16,System.String,System.Int16,System.String,System.Int16)">
	<summary>
 Updates data exception records.
 </summary>
	<param name="dataExceptionId">The data exception id.</param>
	<param name="dataExceptionTypeId">The data exception type id.</param>
	<param name="updateDataExceptionTypeId">True or False.</param>
	<param name="dataExceptionDate">The data exception date.</param>
	<param name="updateDataExceptionDate">True or False.</param>
	<param name="dataExceptionShift">The data exception shift.</param>
	<param name="updateDataExceptionShift">True or False.</param>
	<param name="dataExceptionStatusId">The data exception status id.</param>
	<param name="updateDataExceptionStatusId">True or False.</param>
	<param name="shortDescription">The short description.</param>
	<param name="updateShortDescription">True or False.</param>
	<param name="longDescription">The long description.</param>
	<param name="updateLongDescription">True or False.</param>
	<param name="detailsXml">The details XML.</param>
	<param name="updateDetailsXml">True or False.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateDrill(System.String,System.String)">
	<summary>
 Updates drill records.
 </summary>
	<param name="drillId">The drill id.</param>
	<param name="description">The description.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateGrade(System.Int16,System.String,System.Int16,System.String,System.Int16,System.Int32,System.Int16,System.String,System.Int16,System.Int32,System.Int16,System.String,System.Int16,System.String,System.Int16,System.Int16,System.Int16)">
	<summary>
 Updates grade records.
 </summary>
	<param name="gradeId">The grade id.</param>
	<param name="gradeName">Name of the grade.</param>
	<param name="updateGradeName">True or False.</param>
	<param name="description">The description.</param>
	<param name="updateDescription">True or False.</param>
	<param name="orderNo">The order no.</param>
	<param name="updateOrderNo">True or False.</param>
	<param name="units">The units.</param>
	<param name="updateUnits">True or False.</param>
	<param name="displayPrecision">The display precision.</param>
	<param name="updateDisplayPrecision">True or False.</param>
	<param name="displayFormat">The display format.</param>
	<param name="updateDisplayFormat">True or False.</param>
	<param name="gradeTypeId">The grade type id.</param>
	<param name="updateGradeTypeId">True or False.</param>
	<param name="isVisible">The visibility flag.</param>
	<param name="updateIsVisible">True or False.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateGrade(System.Int16,System.String,System.String,System.String,System.Int32,System.Int16)">
	<summary>
 Updates grade records.
 </summary>
	<param name="gradeId">The grade id.</param>
	<param name="description">The description.</param>
	<param name="units">The units.</param>
	<param name="displayFormat">The display format.</param>
	<param name="displayPrecision">The display precision.</param>
	<param name="isVisible">The visibility flag.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateGradeOrderNumber(System.Int32,System.Int32)">
	<summary>
 Updates grade order number records.
 </summary>
	<param name="gradeId">The grade id.</param>
	<param name="increment">The increment.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateLocation(System.Int32,System.String,System.Int16,System.String,System.Int32)">
	<summary>
 Updates location records.
 </summary>
	<param name="locationId">The location id.</param>
	<param name="name">The name.</param>
	<param name="locationTypeId">The location type id.</param>
	<param name="description">The description.</param>
	<param name="parentLocationId">The parent location id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateLocationType(System.Int16,System.Int16,System.String)">
	<summary>
 Updates location type records.
 </summary>
	<param name="locationTypeId">The location type id.</param>
	<param name="parentLocationTypeId">The parent location type id.</param>
	<param name="description">The description.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateMaterialType(System.Int32,System.String,System.String,System.String,System.Int16,System.Int32,System.Single,System.String,System.Int32)">
	<summary>
 Updates material type records.
 </summary>
	<param name="materialTypeId">The material type id.</param>
	<param name="description">The description.</param>
	<param name="abbreviation">The abbreviation.</param>
	<param name="isWaste">True or False.</param>
	<param name="materialTypeGroupId">The material type group id.</param>
	<param name="densityConversionFactor">The density conversion factor.</param>
	<param name="materialCategoryId">The material category</param>
	<param name="parentMaterialTypeId">The parent material type</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateMaterialType(System.Int32,System.String,System.String,System.Int16,System.Int32,System.Single,System.String,System.Int32)">
	<summary>
 Updates material type records.
 </summary>
	<param name="materialTypeId">The material type id.</param>
	<param name="description">The description.</param>
	<param name="abbreviation">The abbreviation.</param>
	<param name="isWaste">True or False.</param>
	<param name="materialTypeGroupId">The material type group id.</param>
	<param name="densityConversionFactor">The density conversion factor.</param>
	<param name="materialCategoryId">The material category</param>
	<param name="parentMaterialTypeId">The parent material type</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateMaterialCategory(System.String,System.String,System.String)">
	<summary>
 Updates a material category
 </summary>
	<param name="materialCategoryId"></param>
	<param name="parentMaterialCategoryId"></param>
	<param name="description"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateMaterialTypeGroup(System.Int32,System.String,System.String,System.Int32,System.Int16,System.Int16)">
	<summary>
 Updates the material type group.
 </summary>
	<param name="materialTypeGroupId">The material type group id.</param>
	<param name="name">The name.</param>
	<param name="description">The description.</param>
	<param name="orderNo">The order no.</param>
	<param name="isDigblockGroup">True or False.</param>
	<param name="isStockpileGroup">True or False.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateObjectNotes(System.String,System.String,System.String)">
	<summary>
 Updates the object notes.
 </summary>
	<param name="objectId">The object id.</param>
	<param name="notes">The notes.</param>
	<param name="description">The description.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateSetting(System.String,System.String)">
	<summary>
 Updates the setting.
 </summary>
	<param name="settingId">The setting id.</param>
	<param name="value">The value.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateStockpileGroup(System.String,System.String,System.Int16,System.Int32,System.Int16)">
	<summary>
 Updates the stockpile group.
 </summary>
	<param name="stockpileGroupId">The stockpile group id.</param>
	<param name="description">The description.</param>
	<param name="updateDescription">The update description.</param>
	<param name="orderNo">The order no.</param>
	<param name="updateOrderNo">The update order no.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateStockpileGroupOrderNumber(System.String,System.Int32)">
	<summary>
 Updates the stockpile group order number.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="increment">The increment.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateTruck(System.String,System.Int32,System.String)">
	<summary>
 Updates truck records.
 </summary>
	<param name="truckId">The truck id. Max length of 31.</param>
	<param name="truckTypeId">The truck type id.</param>
	<param name="description">The description. Max length of 255.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateTruckType(System.Int32,System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int16)">
	<summary>
 Updates truck type records.
 </summary>
	<param name="truckTypeId">The truck type id.</param>
	<param name="name">The name. Max length of 63.</param>
	<param name="description">The description. Max length of 255.</param>
	<param name="maxTonnes">The max tonnes.</param>
	<param name="aveTonnes">The ave tonnes.</param>
	<param name="minTonnes">The min tonnes.</param>
	<param name="isDefault">True or False.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateUserInterfaceListingFieldsFromProcedure(System.Int32,System.String,System.Int32)">
	<summary>
 Updates user interface listing fields from procedure.
 </summary>
	<param name="userInterfaceListingId">The user interface listing id.</param>
	<param name="procedure">The procedure.</param>
	<param name="recordLimit">Record limit if the stored procedure has it.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateUserInterfaceListingOrderNo(System.Int32,System.Int32)">
	<summary>
 Updates user interface listing order number records.
 </summary>
	<param name="uiFieldId">The UI field id.</param>
	<param name="increment">The increment.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateWasteType(System.String,System.String)">
	<summary>
 Updates waste type records.
 </summary>
	<param name="wasteTypeId">The waste type id. Max length of 31.</param>
	<param name="description">The description. Max length of 255.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.UpdateWeightometerSample(System.Int32,System.Int16,System.String,System.Int16,System.DateTime,System.Int16,System.String,System.Int16,System.Int32,System.Int16,System.Double,System.Int16,System.Double,System.Int16,System.Int32,System.Int16,System.Int32)">
	<summary>
 Updates weightometer sample records.
 </summary>
	<param name="weightometerSampleId">The weightometer sample id.</param>
	<param name="updateWeightometerId">True or False.</param>
	<param name="weightometerId">The weightometer id. Max length of 31.</param>
	<param name="updateSampleDate">True or False.</param>
	<param name="sampleDate">The sample date.</param>
	<param name="updateSampleShift">True or False.</param>
	<param name="sampleShift">The sample shift.</param>
	<param name="updateOrderNo">True or False.</param>
	<param name="orderNo">The order no.</param>
	<param name="updateTonnes">True or False.</param>
	<param name="tonnes">The weight in tonnes.</param>
	<param name="updateCorrectedTonnes">True or False.</param>
	<param name="correctedTonnes">The corrected tonnes.</param>
	<param name="updateSourceStockpileId">True of False.</param>
	<param name="sourceStockpileId">The source stockpile id.</param>
	<param name="updateDestinationStockpileId">True of False.</param>
	<param name="destinationStockpileId">The destination stockpile id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetLocationIdByName(System.String,System.Int16,System.Int32)">
	<summary>
 Gets the location id.
 </summary>
	<param name="name">The unique name of the location</param>
	<param name="locationTypeId">The location type id</param>
	<returns>The location id if the location exists otherwise null</returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IUtility.GetPreviousDateShiftFromToday(System.DateTime@,System.String@)">
	<summary>
 Get previous date and shift from today's date.
 </summary>
	<param name="PreviousDate">Previous date (output)</param>
	<param name="PreviousShift">Previous shift (output)</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddOrUpdateStockpileAdjustmentGrade(System.Int32,System.Int16,System.Single)">
	<summary>
 Adds or updates stockpile adjustment grade records
 </summary>
	<param name="stockpileAdjustmentId">The stockpile adjustment id.</param>
	<param name="gradeId">The grade id.</param>
	<param name="gradeValue">The grade value.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddOrUpdateStockpileBuildComponentGrade(System.Int32,System.Int32,System.Int32,System.Int16,System.Single)">
	<summary>
 Adds or updates stockpile build component grade records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<param name="componentId">The component id.</param>
	<param name="gradeId">The grade id.</param>
	<param name="gradeValue">The grade value.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddOrUpdateStockpileLocation(System.Int32,System.Int16,System.Int32)">
	<summary>
 Adds or updates stockpile location records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="locationTypeId">The location type id. Max length of 31.</param>
	<param name="locationId">The location id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddOrUpdateStockpileNotes(System.Int32,System.String,System.String,System.Int32)">
	<summary>
 Adds or updates stockpile notes records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="notes">The notes. Max length of 1023.</param>
	<param name="stockpileFieldId">The stockpile field id. Max length of 31.</param>
	<param name="orderNo">The order no.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddOrUpdateStockpileSurveySample(System.Int32,System.Int32,System.DateTime,System.String,System.Int32,System.DateTime,System.Int16,System.Int16,System.Int32,System.Double,System.Int16,System.Int16,System.Int16)">
	<summary>
 Adds or updates stockpile survey sample records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<param name="stockpileSurveyDate">The stockpile survey date.</param>
	<param name="stockpileSurveyShift">The stockpile survey shift.</param>
	<param name="stockpileSurveyTypeId">The stockpile survey type id.</param>
	<param name="importedDateTime">The imported date time.</param>
	<param name="isTonnesSurvey">True or False.</param>
	<param name="isGradesSurvey">True or False.</param>
	<param name="stockpileSurveySampleId">The stockpile survey sample id.</param>
	<param name="tonnes">The weight in tonnes.</param>
	<param name="isAutoAdjusting">The is auto adjusting.</param>
	<param name="adjustHaulage">True or False.</param>
	<param name="useGivenMoistureScaling">True or False.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddOrUpdateStockpileValue(System.Int32,System.Double,System.String,System.Int32)">
	<summary>
 Adds or updates stockpile value records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="fieldValue">The field value.</param>
	<param name="stockpileFieldId">The stockpile field id.</param>
	<param name="orderNo">The order no.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddOrUpdateStockpileValue(System.Int32,System.Nullable{System.Double},System.String,System.Int32)">
	<summary>
 With a nullable field value so empty attributes are deleted.
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddStockpile(System.String,System.Int16,System.Int16,System.String,System.Int32,System.String,System.String,System.DateTime,System.String,System.Int16,System.Double,System.Int16,System.Int16,System.DateTime,System.String,System.DateTime,System.String,System.String,System.String,System.Double)">
	<summary>
 Adds stockpile records.
 </summary>
	<param name="stockpileName">Name of the stockpile. Max length of 31.</param>
	<param name="isMultiBuild">True or False.</param>
	<param name="isMultiComponent">True or False.</param>
	<param name="stockpileTypeId">The stockpile type id. Max length of 31.</param>
	<param name="materialTypeId">The material type id.</param>
	<param name="stockpileStateId">The stockpile state id. Max length of 10.</param>
	<param name="description">The description. Max length of 255.</param>
	<param name="startDate">The start date.</param>
	<param name="startShift">The start shift.</param>
	<param name="isInReports">True or False.</param>
	<param name="maxTonnes">The max tonnes.</param>
	<param name="isVisible">True or False.</param>
	<param name="haulageRawResolveAll">The haulage raw resolve all.</param>
	<param name="reclaimStartDate">The reclaim start date.</param>
	<param name="reclaimStartShift">The reclaim start shift.</param>
	<param name="endDate">The end date.</param>
	<param name="endShift">The end shift.</param>
	<param name="completionDescription">The completion description. Max length of 255.</param>
	<param name="notes">The notes. Max length of 4095.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddStockpileAdjustment(System.Int32,System.Int32,System.DateTime,System.String,System.String,System.Int16,System.Int16,System.Int16,System.Double,System.Int32,System.Int16,System.Int32,System.Int16,System.Int32,System.Int32,System.Int16)">
	<summary>
 Adds stockpile adjustment records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<param name="adjustmentDate">The adjustment date.</param>
	<param name="adjustmentShift">The adjustment shift.</param>
	<param name="description">The description. Max length of 255.</param>
	<param name="isAddOrRemove">True or False.</param>
	<param name="isTonnesAdjustment">True or False.</param>
	<param name="isGradesAdjustment">True or False.</param>
	<param name="tonnes">The weight in tonnes.</param>
	<param name="componentId">The component id.</param>
	<param name="isManual">True or False.</param>
	<param name="stockpileSurveySampleId">The stockpile survey sample id.</param>
	<param name="isStockpileTransfer">True or False.</param>
	<param name="sourceStockpileId">The source stockpile id.</param>
	<param name="sourceBuildId">The source build id.</param>
	<param name="useGivenMoistureScaling">True or False.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddStockpileBuild(System.Int32,System.String,System.Int32,System.DateTime,System.String,System.Int16,System.DateTime,System.String,System.DateTime,System.String,System.String,System.Double)">
	<summary>
 Adds stockpile build records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="stockpileStateId">The stockpile state id. Max length of 10.</param>
	<param name="buildId">The build id.</param>
	<param name="startDate">The start date.</param>
	<param name="startShift">The start shift.</param>
	<param name="haulageRawResolveAll">True or False.</param>
	<param name="reclaimStartDate">The reclaim start date.</param>
	<param name="reclaimStartShift">The reclaim start shift.</param>
	<param name="endDate">The end date.</param>
	<param name="endShift">The end shift.</param>
	<param name="completionDescription">The completion description. Max length of 255.</param>
	<param name="startTonnes">The start weight in tonnes.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddStockpileBuildComponent(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int16,System.String)">
	<summary>
 Adds stockpile build component records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<param name="layer">The layer.</param>
	<param name="startTonnes">The start weight in tonnes.</param>
	<param name="componentId">The component id.</param>
	<param name="haulageRawResolveAll">True or False.</param>
	<param name="name">The name. Max length of 31.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddStockpileSurvey(System.DateTime,System.String,System.Int32,System.Int16)">
	<summary>
 Adds stockpile survey records.
 </summary>
	<param name="stockpileSurveyDate">The stockpile survey date.</param>
	<param name="stockpileSurveyShift">The stockpile survey shift.</param>
	<param name="stockpileSurveyTypeId">The stockpile survey type id.</param>
	<param name="adjustHaulage">True or False.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.AddStockpileStockpileTypePeriod(System.Int32,System.String,System.DateTime)">
	<summary>
 Adds stockpile stockpile type period records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="stockpileTypeId">The stockpile type id. Max length of 31.</param>
	<param name="startDate">The start date.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.ApproveStockpileSurvey(System.DateTime,System.String,System.Int32)">
	<summary>
 Approves stockpile survey records.
 </summary>
	<param name="stockpileSurveyDate">The stockpile survey date.</param>
	<param name="stockpileSurveyShift">The stockpile survey shift.</param>
	<param name="stockpileSurveyTypeId">The stockpile survey type id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.DeleteStockpile(System.Int32)">
	<summary>
 Deletes stockpile records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.DeleteStockpileAdjustment(System.Int32)">
	<summary>
 Deletes stockpile adjustment records.
 </summary>
	<param name="stockpileAdjustmentId">The stockpile adjustment id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.DeleteStockpileBuild(System.Int32,System.Int32)">
	<summary>
 Deletes stockpile build records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.DeleteStockpileBuildComponent(System.Int32,System.Int32,System.Int32)">
	<summary>
 Deletes stockpile build component records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<param name="componentId">The component id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.DeleteStockpileSurvey(System.DateTime,System.String,System.Int32)">
	<summary>
 Deletes stockpile survey records.
 </summary>
	<param name="stockpileSurveyDate">The stockpile survey date.</param>
	<param name="stockpileSurveyShift">The stockpile survey shift.</param>
	<param name="stockpileSurveyTypeId">The stockpile survey type id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.DeleteStockpileStockpileTypePeriodAll(System.Int32)">
	<summary>
 Deletes all stockpile type period records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpile(System.Int32)">
	<summary>
 Returns a stockpile record.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpile(System.Int32,System.Int16)">
	<summary>
 Returns a stockpile record.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetRawStockpile(System.Int32,System.Int16)">
	<summary>
 Returns a stockpile record.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileActivityList(System.Int32,System.DateTime,System.DateTime,System.Int16,System.Int16,System.Int16)">
	<summary>
 Returns a list stockpile activity records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="activityType">Type of the activity.</param>
	<param name="groupByActivityType">True or False.</param>
	<param name="pivotGrades">True or False.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileActivityList(System.Int32,System.DateTime,System.DateTime,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
	<summary>
 Returns a list stockpile activity records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="activityType">Type of the activity.</param>
	<param name="groupByActivityType">True or False.</param>
	<param name="pivotGrades">True or False.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileActivityStateChanges(System.Int32,System.DateTime,System.DateTime)">
	<summary>
 Returns stockpile activity state changes records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileAdjustmentList(System.DateTime,System.DateTime,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Returns a list of stockpile adjustment records.
 </summary>
	<param name="filterStartDate">The filter start date.</param>
	<param name="filterEndDate">The filter end date.</param>
	<param name="filterIsManual">True or False.</param>
	<param name="filterStockpileId">The filter stockpile id.</param>
	<param name="stockpileAdjustmentId">The stockpile adjustment id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileAdjustmentList(System.DateTime,System.DateTime,System.Int16,System.Int32,System.Int32,System.Int32,System.Int32,System.Int16)">
	<summary>
 Returns a list of stockpile adjustment records.
 </summary>
	<param name="filterStartDate">The filter start date.</param>
	<param name="filterEndDate">The filter end date.</param>
	<param name="filterIsManual">True or False.</param>
	<param name="filterStockpileId">The filter stockpile id.</param>
	<param name="stockpileAdjustmentId">The stockpile adjustment id.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileBalances(System.Int32,System.Int32,System.DateTime,System.String,System.DateTime,System.String,System.Int16)">
	<summary>
 Returns stockpile balances.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<param name="startDate">The start date.</param>
	<param name="startShift">The start shift.</param>
	<param name="endDate">The end date.</param>
	<param name="endShift">The end shift.</param>
	<param name="isVisible">True or False.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileBuild(System.Int32,System.Int32)">
	<summary>
 Returns stockpile build records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileBuildBalance(System.Int32,System.Int32,System.DateTime,System.String)">
	<summary>
 Returns stockpile build balance records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<param name="balanceDate">The balance date.</param>
	<param name="balanceShift">The balance shift.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileBuildComponentList(System.Int32,System.Int32,System.Int16)">
	<summary>
 Returns a list of stockpile build component records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileBuildComponentList(System.Int32,System.Int32)">
	<summary>
 Returns a list of stockpile build component records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileBuildList(System.Int32)">
	<summary>
 Returns a list stockpile build records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileChangesOverPeriod(System.Int32,System.DateTime,System.DateTime)">
	<summary>
 Returns a list of stockpile changes over a specified period.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetRawStockpileChangesOverPeriod(System.Int32,System.DateTime,System.DateTime)">
	<summary>
 Returns a list of Raw stockpile changes over a specified period.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileComposition(System.DateTime,System.String,System.Int32,System.Int32)">
	<summary>
 Returns stockpile composition records.
 </summary>
	<param name="compositionDate">The composition date.</param>
	<param name="shift">The shift.</param>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileComposition(System.DateTime,System.String,System.Int32,System.Int32,System.Int16)">
	<summary>
 Returns stockpile composition records.
 </summary>
	<param name="compositionDate">The composition date.</param>
	<param name="shift">The shift.</param>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileFieldList">
	<summary>
 Returns a list of stockpile field records.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileFieldNotes(System.Int32,System.String)">
	<summary>
 Returns stockpile field notes.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="stockpileFieldId">The stockpile field id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileFieldNotesList(System.Int32)">
	<summary>
 Returns a list of stockpile field notes.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileFieldValue(System.Int32,System.String)">
	<summary>
 Returns the stockpile field value.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="stockpileFieldId">The stockpile field id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileFieldValueList(System.Int32)">
	<summary>
 Returns a list of stockpile field value records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileGradeGraph(System.Int32,System.DateTime,System.DateTime,System.Int32,System.Int16)">
	<summary>
 Returns a stockpile grade graph.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="buildId">The build id.</param>
	<param name="graphByShift">True or False.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileGradeGraph(System.Int32,System.DateTime,System.DateTime,System.Int32,System.Int16,System.Int16)">
	<summary>
 Returns a stockpile grade graph.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="buildId">The build id.</param>
	<param name="graphByShift">True or False.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileList(System.Int16,System.String,System.String,System.Int16,System.Int32,System.Int32,System.Int16,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int16)">
	<summary>
 Returns a list of stockpile records.
 </summary>
	<param name="groupByStockpileGroups">The group by stockpile groups.</param>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
	<param name="stockpileName">Name of the stockpile. Max length of 31.</param>
	<param name="isCompleted">True or False.</param>
	<param name="materialTypeId">The material type id.</param>
	<param name="sortType">Type of the sort.</param>
	<param name="includeGrades">True or False.</param>
	<param name="startDate">Filter on Stockpile Build Start Date</param>
	<param name="endDate">Filter on Stockpile Build Start Date</param>
	<param name="locationId">The location id.</param>
	<param name="isExcludeEmpty"> True or False</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetRawStockpileList(System.Int16,System.String,System.String,System.Int16,System.Int32,System.Int32,System.Int16,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int16)">
	<summary>
 Returns a list of stockpile records.
 </summary>
	<param name="groupByStockpileGroups">The group by stockpile groups.</param>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
	<param name="stockpileName">Name of the stockpile. Max length of 31.</param>
	<param name="isCompleted">True or False.</param>
	<param name="materialTypeId">The material type id.</param>
	<param name="sortType">Type of the sort.</param>
	<param name="includeGrades">True or False.</param>
	<param name="startDate">Filter on Stockpile Build Start Date</param>
	<param name="endDate">Filter on Stockpile Build Start Date</param>
	<param name="locationId">The location id.</param>
	<param name="isExcludeEmpty"> True or False</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileList(System.Int16,System.String,System.String,System.Int16,System.Int32,System.Int32,System.Int16,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int16,System.Int16)">
	<summary>
 Returns a list of stockpile records.
 </summary>
	<param name="groupByStockpileGroups">The group by stockpile groups.</param>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
	<param name="stockpileName">Name of the stockpile. Max length of 31.</param>
	<param name="isCompleted">True or False.</param>
	<param name="materialTypeId">The material type id.</param>
	<param name="sortType">Type of the sort.</param>
	<param name="includeGrades">True or False.</param>
	<param name="startDate">Filter on Stockpile Build Start Date</param>
	<param name="endDate">Filter on Stockpile Build Start Date</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<param name="isExcludeEmpty">True or False</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetRawStockpileList(System.Int16,System.String,System.String,System.Int16,System.Int32,System.Int32,System.Int16,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int16,System.Int16)">
	<summary>
 Returns a list of stockpile records.
 </summary>
	<param name="groupByStockpileGroups">The group by stockpile groups.</param>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
	<param name="stockpileName">Name of the stockpile. Max length of 31.</param>
	<param name="isCompleted">True or False.</param>
	<param name="materialTypeId">The material type id.</param>
	<param name="sortType">Type of the sort.</param>
	<param name="includeGrades">True or False.</param>
	<param name="startDate">Filter on Stockpile Build Start Date</param>
	<param name="endDate">Filter on Stockpile Build Start Date</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<param name="isExcludeEmpty">True or False</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileIdList(System.Int32,System.String,System.Int16)">
	<summary>
 Returns a list of stockpile id records.
 </summary>
	<param name="materialTypeId">The material type id.</param>
	<param name="stockpileGroupId">The stockpile group id. Max length of 31.</param>
	<param name="isVisible">True or False.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileLocation(System.Int32)">
	<summary>
 Returns the stockpile location.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileRunningBalance(System.Int32,System.DateTime,System.DateTime)">
	<summary>
 Returns the stockpile running balance.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileRunningBalance(System.Int32,System.DateTime,System.DateTime,System.Int16)">
	<summary>
 Returns the stockpile running balance.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileRunningBalance(System.Int32,System.DateTime,System.DateTime,System.Int16,System.String)">
	<summary>
 Returns the stockpile running balance.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<param name="gradeType">Grade type to be filtered by.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetRawStockpileRunningBalance(System.Int32,System.DateTime,System.DateTime)">
	<summary>
 Returns the raw stockpile running balance.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetRawStockpileRunningBalance(System.Int32,System.DateTime,System.DateTime,System.Int16)">
	<summary>
 Returns the raw stockpile running balance.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetRawStockpileRunningBalance(System.Int32,System.DateTime,System.DateTime,System.Int16,System.String)">
	<summary>
 Returns the raw stockpile running balance.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<param name="gradeType">Grade type to be filtered by.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileStates">
	<summary>
 Returns stockpile states.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileStockpileTypePeriodList(System.Int32)">
	<summary>
 Returns a list of stockpile type period records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileSurveyList(System.DateTime,System.String,System.Int32,System.DateTime,System.DateTime,System.Int16)">
	<summary>
 Returs a list of stockpile survey records.
 </summary>
	<param name="stockpileSurveyDate">The stockpile survey date.</param>
	<param name="stockpileSurveyShift">The stockpile survey shift.</param>
	<param name="stockpileSurveyTypeId">The stockpile survey type id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="isVisible">Filter by Is_Visible flag.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileSurveySampleList(System.DateTime,System.String,System.Int32,System.Int32)">
	<summary>
 Returns a list of stockpile survey sample records.
 </summary>
	<param name="stockpileSurveyDate">The stockpile survey date.</param>
	<param name="stockpileSurveyShift">The stockpile survey shift.</param>
	<param name="stockpileSurveyTypeId">The stockpile survey type id.</param>
	<param name="stockpileSurveySampleId">The stockpile survey sample id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileSurveyTypeList">
	<summary>
 Returns a list of stockpile survey type records.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileTypeList">
	<summary>
 Returns a list of stockpile type records.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.UnapproveStockpileSurvey(System.DateTime,System.String,System.Int32)">
	<summary>
 Unapproves stockpile survey records.
 </summary>
	<param name="stockpileSurveyDate">The stockpile survey date.</param>
	<param name="stockpileSurveyShift">The stockpile survey shift.</param>
	<param name="stockpileSurveyTypeId">The stockpile survey type id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.UpdateStockpile(System.Int32,System.Int16,System.String,System.Int16,System.String,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int32,System.Int16,System.Int16,System.Int16,System.Double,System.Int16,System.Int16,System.Int16,System.String,System.Int16,System.Double,System.Int16)">
	<summary>
 Updates stockpile records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="updateStockpileName">True or False.</param>
	<param name="stockpileName">Name of the stockpile. Max length of 31.</param>
	<param name="updateDescription">True or False.</param>
	<param name="description">The description. Max length of 255.</param>
	<param name="updateIsMultiBuild">True or False.</param>
	<param name="isMultiBuild">True or False.</param>
	<param name="updateIsMultiComponent">True or False.</param>
	<param name="isMultiComponent">True or False.</param>
	<param name="updateMaterialTypeId">True or False.</param>
	<param name="materialTypeId">The material type id.</param>
	<param name="updateIsInReports">True or False.</param>
	<param name="isInReports">True or False.</param>
	<param name="updateMaxTonnes">True or False.</param>
	<param name="maxTonnes">The max weight in tonnes.</param>
	<param name="updateIsVisible">True or False.</param>
	<param name="isVisible">True or False.</param>
	<param name="updateNotes">True or False.</param>
	<param name="notes">The notes. Max length of 4095.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.UpdateStockpileBuild(System.Int32,System.Int32,System.Int16,System.String,System.Int16,System.DateTime,System.Int16,System.String,System.Int16,System.DateTime,System.Int16,System.String,System.Int16,System.DateTime,System.Int16,System.String,System.Int16,System.String,System.Int16)">
	<summary>
 Updates stockpile build records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<param name="updateStockpileStateId">True or False.</param>
	<param name="stockpileStateId">The stockpile state id. Max length of 10.</param>
	<param name="updateStartDate">True or False.</param>
	<param name="startDate">The start date.</param>
	<param name="updateStartShift">True or False.</param>
	<param name="startShift">The start shift.</param>
	<param name="updateReclaimStartDate">True or False.</param>
	<param name="reclaimStartDate">The reclaim start date.</param>
	<param name="updateReclaimStartShift">True or False.</param>
	<param name="reclaimStartShift">The reclaim start shift.</param>
	<param name="updateEndDate">True or False.</param>
	<param name="endDate">The end date.</param>
	<param name="updateEndShift">True or False.</param>
	<param name="endShift">The end shift.</param>
	<param name="updateCompletionDescription">True or False.</param>
	<param name="completionDescription">The completion description.</param>
	<param name="haulageRawResolveAll">True or False.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.UpdateStockpileBuildComponent(System.Int32,System.Int32,System.Int32,System.Int16,System.Int32,System.Int16,System.String,System.Int16,System.Double,System.Int16)">
	<summary>
 Update stockpile build component records.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<param name="componentId">The component id.</param>
	<param name="updateLayer">The update layer.</param>
	<param name="layer">The layer.</param>
	<param name="updateName">Name of the update.</param>
	<param name="name">The name.</param>
	<param name="updateStartTonnes">The update start tonnes.</param>
	<param name="startTonnes">The start tonnes.</param>
	<param name="haulageRawResolveAll">The haulage raw resolve all.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.GetStockpileBuildActive(System.Int32,System.Int32,System.DateTime,System.String)">
	<summary>
 Determines whether the stockpile build is valid for the dates provided.
 </summary>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.  Optional.</param>
	<param name="requestDate">The date we want to know if the build is active for.</param>
	<param name="requestShift">The shift we want to know if the build is active for.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IStockpile.UpdateStockpileAdjustment(System.Int32,System.Int32,System.Int32,System.DateTime,System.String,System.String,System.Int16,System.Int16,System.Int16,System.Double,System.Int32,System.Int16,System.Int32,System.Int16,System.Int32,System.Int32,System.Int16)">
	<summary>
 Updates stockpile adjustment records.
 </summary>
	<param name="stockpileAdjustmentId">The stockpile adjustment id.</param>
	<param name="stockpileId">The stockpile id.</param>
	<param name="buildId">The build id.</param>
	<param name="adjustmentDate">The adjustment date.</param>
	<param name="adjustmentShift">The adjustment shift.</param>
	<param name="description">The description. Max length of 255.</param>
	<param name="isAddOrRemove">True or False.</param>
	<param name="isTonnesAdjustment">True or False.</param>
	<param name="isGradesAdjustment">True or False.</param>
	<param name="tonnes">The weight in tonnes.</param>
	<param name="componentId">The component id.</param>
	<param name="isManual">True or False.</param>
	<param name="stockpileSurveySampleId">The stockpile survey sample id.</param>
	<param name="isStockpileTransfer">True or False.</param>
	<param name="sourceStockpileId">The source stockpile id.</param>
	<param name="sourceBuildId">The source build id.</param>
	<param name="useGivenMoistureScaling">True or False.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.AddRecalcHistory(System.String,System.Int32,System.DateTime,System.DateTime,System.DateTime,System.String,System.DateTime,System.String,System.Int64,System.String,System.String)">
	<summary>
 Adds a recalc history record.
 </summary>
	<param name="recalcTypeId">The recalc type id.</param>
	<param name="recalcStateId">The recalc state id.</param>
	<param name="startDateTime">The start date time.</param>
	<param name="endDateTime">The end date time.</param>
	<param name="startDate">The start date.</param>
	<param name="startShift">The start shift.</param>
	<param name="endDate">The end date.</param>
	<param name="endShift">The end shift.</param>
	<param name="maxQueueId">The max queue id.</param>
	<param name="errorMessage">The error message.</param>
	<param name="errorDetails">The error details.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcHistory(System.Int64)">
	<summary>
 Returns a recalc history record.
 </summary>
	<param name="recalcHistoryId">The recalc history id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcHistoryList(System.DateTime,System.DateTime,System.Int32,System.String,System.Boolean)">
	<summary>
 Returns a list of recalc history records based on specified criteria.
 </summary>
	<param name="dateFrom">The date from.</param>
	<param name="dateTo">The date to.</param>
	<param name="recalcLevel">The recalc level.</param>
	<param name="recalcState">State of the recalc. Max length of 31.</param>
	<param name="limitRecords">if set to <c>true</c> will limit the results to 100 records.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcLogicDescription(System.Int64)">
	<summary>
 Returns the recalc logic description.
 </summary>
	<param name="recalcLogicHistoryId">The recalc logic history id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcLogicHistoryTransactionLevel0(System.DateTime,System.String,System.DateTime,System.String,System.String,System.String,System.String,System.Int16)">
	<summary>
 Returns the recalc logic history transaction level 0.
 </summary>
	<param name="startDate">The start date.</param>
	<param name="startShift">The start shift.</param>
	<param name="endDate">The end date.</param>
	<param name="endShift">The end shift.</param>
	<param name="source">The source.</param>
	<param name="destination">The destination.</param>
	<param name="transactionType">Type of the transaction.</param>
	<param name="includeGrades">Specifies if grades are included.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcLogicHistoryTransactionLevel1(System.Int64,System.String,System.Int16)">
	<summary>
 Returns the recalc logic history transaction level 1.
 </summary>
	<param name="recordId">The record id.</param>
	<param name="transactionType">Type of the transaction.</param>
	<param name="includeGrades">Specifies if grades are included.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcLogicHistoryTransactionLevel2(System.Int64,System.Int16)">
	<summary>
 Returns the recalc logic history transaction level 2.
 </summary>
	<param name="recordId">The record id.</param>
	<param name="includeGrades">Specifies if grades are included.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcLogicHistoryTransactionLevel3(System.Int64,System.Int16)">
	<summary>
 Returns the recalc logic history transaction level 3.
 </summary>
	<param name="recordId">The record id.</param>
	<param name="includeGrades">Specifies if grades are included.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcLogicTypeList(System.Int32)">
	<summary>
 Returns a list of recalc logic type records.
 </summary>
	<param name="recalcLogicTypeId">The recalc logic type id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcOpenningGenealogyRecords(System.DateTime,System.String)">
	<summary>
 Returns the openning genealogy records for all genealogical stockpiles for the given processing shift. 
 This is called by the Recalc before beginning to process transactions.
 </summary>
	<param name="processingDate">The current processing date of the recalc.</param>
	<param name="processingShift">The current processing shift of the recalc.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcOpenningStockpileBalances(System.DateTime,System.String)">
	<summary>
 Returns the openning stockpile balances for all open stockpiles for the processing shift.
 This is called by the Recalc before beginning to process transactions.
 </summary>
	<param name="processingDate">The current processing date of the recalc.</param>
	<param name="processingShift">The current processing shift of the recalc.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcProgress">
	<summary>
 Returns the recalc progress.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.UpdateRecalcHistory(System.Int64,System.DateTime,System.DateTime,System.DateTime,System.String,System.DateTime,System.String,System.DateTime,System.String,System.Int32,System.Int32,System.Int64,System.String,System.String)">
	<summary>
 Updates a recalc history record.
 </summary>
	<param name="recalcHistoryId">The recalc history id.</param>
	<param name="startDateTime">The start date time.</param>
	<param name="endDateTime">The end date time.</param>
	<param name="startDate">The start date.</param>
	<param name="startShift">The start shift.</param>
	<param name="endDate">The end date.</param>
	<param name="endShift">The end shift.</param>
	<param name="currentProcessingDate">The current processing date.</param>
	<param name="currentProcessingShift">The current processing shift.</param>
	<param name="recalcStateId">The recalc state id.</param>
	<param name="noRestarts">The number of restarts.</param>
	<param name="maxQueueId">The max queue id.</param>
	<param name="errorMessage">The error message.</param>
	<param name="errorDetails">The error details.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcWaitTime(System.String)">
	<summary>
 Calculates the number of seconds the recalc should wait before it starts, based on previous recalc failures.
 </summary>
	<param name="recalcTypeId">The recalc type ("Level 1" or "Level 2").</param>
	<returns>The number of seconds the recalc should wait before starting.</returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetRecalcParcelTableSeeds(System.Int64@,System.Int64@)">
	<summary>
 Retreives the seed values for the parcel tables
 </summary>
	<param name="parcelGradeSeed">ParcelGrade table seed</param>
	<param name="balanceParcelSeed">DataProcessStockpileBalanceParcel table seed</param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.DeleteRecalcUnusedParcelGrade">
	<summary>
 Removes Parcel grade records that are no longer used by
 DataProcessTransactionParcel or DataProcessStockpileBalanceParcel
 </summary>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.CallCalcVirtualFlow(System.String,System.DateTime)">
	<summary>
 Call the custom Calc Virtual flow stored procedure passed in, passing the transaction date
 as @iTransactionDate
 </summary>
	<param name="storedProcedureName"></param>
	<param name="transactionDate"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.GetCalcVirtualQueueMinimumEntry">
	<summary>
 Retrieves the earliest date from the Calc Virtual Flow queue table. It will return an NullValue.DateTime
 if no date was found.
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IRecalc.DeleteCalcVirtualFlowQueueDate(System.DateTime)">
	<summary>
 Removes all instances of the passed in transaction date from the Calc Virtual Flow queue
 </summary>
	<param name="transactionDate"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IMinePlan.GetMinePlanList(System.Int32,System.DateTime,System.DateTime,System.Int32,System.Int16)">
	<summary>
 Returns a list of mine plan records with the specified criteria.
 </summary>
	<param name="minePlanTypeId">The mine plan type id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<param name="dateFilterType">Type of the date filter.</param>
	<param name="showParentsOnly">Valid values are 0 (False) or 1 (True).</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IMinePlan.GetMinePlanTypeList">
	<summary>
 Returns all mine plan type records.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IImportAutoQueue.GetActiveImportAutoQueueProfiles">
	<summary>
 Gets the set of active (not disabled) Import Auto-Queue Profiles
 </summary>
	<returns>DataTable containing details of active profiles</returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IImportAutoQueue.GetCountOfImportJobsForImportIdAndStatus(System.Int32,System.Int32,System.DateTime)">
	<summary>
 Gets the count of import jobs for an import that currently have the specified stats
 </summary>
	<param name="importId">Identifies the import to check running status for</param>
	<param name="importJobStatusId">Specifies the status to count jobs for</param>
	<param name="cutoffDateTime">Specifies a cutoff time (prior to which jobs will not be counted)</param>
	<returns>Returns the count of import jobs with the specified status</returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IImportAutoQueue.GetLatestImportJobActivityDateForImport(System.Int32,System.DateTime)">
	<summary>
 Gets the latest import job activity datetime for a specified import
 </summary>
	<param name="importId">Identifies the import to check</param>
	<param name="cutoffDate">the cutoff date, prior to which no activity records will be searched</param>
	<returns>The Date and Time of last import job activity for the specified import (if any)</returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IImportAutoQueue.GetImportJobStatusList">
	<summary>
 Gets the set of import job statuses
 </summary>
	<returns>A DataTable containing job status list entries</returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IImportAutoQueue.AddImportJob(System.Int32,System.Int32,System.Int32)">
	<summary>
 Adds an import job for a specified import
 </summary>
	<param name="importId">Identifies the import to add a job for</param>
	<param name="importJobStatusId">Status id to initialise for the new job</param>
	<param name="priority">Priority to be set for the new job</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IImportAutoQueue.AddImportJobForAutoQueueProfile(System.Int32)">
	<summary>
 Add an ImportJob for the specified Auto Queue Profile Id
 </summary>
	<param name="importAutoQueueProfileId">Id of the ImportAutoQueueProfile</param>
	<remarks>The Import Job will be added with the parameters defined for the auto-queue profile, with default parameter values where parameters are not explicitly defined on the profile</remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IImportAutoQueue.GetImportAutoQueueProfileRequired(System.Int32,System.Int32)">
	<summary>
 Determines whether an import auto-queue profile is required
 </summary>
	<param name="importAutoQueueProfileId">Id of the ImportAutoQueueProfile</param>
	<param name="missedScheduleCatchupMinutes">The number of minutes that can elapse passed a schedule due date before the due time should be considered missed</param>
	<returns>True if an import for this profile is required; false otherwise</returns>
</member><member name="T:Snowden.Reconcilor.Core.Database.DalBaseObjects.IImportAutoQueue">
	<summary>
 Interface supported by DAL used for Import Auto-Queue checks and operations
 </summary>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IHaulage.GetHaulageTonnesByTruck(System.String,System.Int32,System.Double,System.String,System.Int32)">
	<summary>
 Get a tonnage figure calculated by multipling loads by the average capacity of the truck type
 </summary>
	<param name="truckId">Id of Truck</param>
	<param name="loads">Number of Loads</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IEvent.AddAuditHistory(System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.Int16,System.String,System.String)">
	<summary>
 Adds an audit history record.
 </summary>
	<param name="auditTypeName">Name of the audit type. Max length is 255.</param>
	<param name="auditTypeGroupId">The audit type group id.</param>
	<param name="description">The description. Max length of 1023.</param>
	<param name="hyperlink">The hyperlink. Max length of 1023.</param>
	<param name="details">The details. Max length of 4095.</param>
	<param name="userId">The user id.</param>
	<param name="isVisible">Valid values are 0 (False) or 1 (True).</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IEvent.GetAuditHistoryList(System.Int64,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Int16)">
	<summary>
 Returns a list of audit history records.
 </summary>
	<param name="filterAuditHistoryId">The audit history id.</param>
	<param name="filterFromDate">The from date.</param>
	<param name="filterToDate">The to date.</param>
	<param name="userId">The user id.</param>
	<param name="filterAuditTypeGroupId">The audit type group id.</param>
	<param name="filterAuditTypeId">The audit type id.</param>
	<param name="filterIsVisible">Valid values are 0 (False) or 1 (True).</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IEvent.GetAuditTypeGroupList">
	<summary>
 Returns a list of audit type group records.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IEvent.GetAuditTypeList(System.Int32)">
	<summary>
 Returns a list of audit type records.
 </summary>
	<param name="filterAuditTypeGroupId">The audit type group id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.ActivateDigblock(System.String,System.DateTime,System.String,System.Int16)">
	<summary>
 Activates a digblock record.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="startDate">The start date.</param>
	<param name="startShift">The start shift.</param>
	<param name="haulageRawResolveAll">Specifies if all haulages are to be resolved. </param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.AddDigblock(System.String,System.Int32,System.Double,System.String,System.DateTime,System.DateTime,System.String,System.Int16,System.Int16,System.Double,System.Double,System.Double,System.String,System.Int16,System.Int16,System.Int16,System.DateTime,System.String)">
	<summary>
 Adds a digblock record.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="materialTypeId">The material type id.</param>
	<param name="startTonnes">The starting wieght in tonnes.</param>
	<param name="description">The digblock description. Max length of 63.</param>
	<param name="creationDateTime">The creation date time.</param>
	<param name="startDate">The start date.</param>
	<param name="startShift">The start shift.</param>
	<param name="isInPitDepletion">Specifies if the digblock is in pit depletion. </param>
	<param name="isVisible">Specifies if the digblock is visible. </param>
	<param name="x">The x.</param>
	<param name="y">The y.</param>
	<param name="z">The z.</param>
	<param name="notes">Digblock notes. Max length of 1023.</param>
	<param name="autoActivateHaulage">Specifies if the haulage is activated automatically. </param>
	<param name="haulageRawResolveAll">Specifies if all haulages are to be resolved. </param>
	<param name="autoValidateDepletionTonnes">Specifies if depletion weights are automatically validated. </param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.AddDigblockListFilterLocationId(System.Int32)">
	<summary>
 Adds a location id to the digblock list filter temporary table.
 </summary>
	<param name="locationId">The location id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.AddDigblockPolygon(System.String,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
	<summary>
 Adds the digblock polygon.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="x">The x.</param>
	<param name="y">The y.</param>
	<param name="z">The z.</param>
	<param name="orderNo">The order no.</param>
	<param name="isFinal">Specifies if this is final.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.AddOrUpdateDigblockGrade(System.String,System.Int32,System.Single)">
	<summary>
 Adds or updates a digblock grade record.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="gradeId">The grade id.</param>
	<param name="gradeValue">The grade value.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.AddOrUpdateDigblockLocation(System.String,System.Int16,System.Int32)">
	<summary>
 Adds or updates digblock location record.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="locationTypeId">The location type id. Max length of 31.</param>
	<param name="locationId">The location id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.AddOrUpdateDigblockNotes(System.String,System.String,System.String,System.Int32)">
	<summary>
 Adds or updates a digblock notes record.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="notes">The notes. Max length of 1023.</param>
	<param name="digblockFieldId">The digblock field id. Max length of 31.</param>
	<param name="orderNo">The order no.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.AddOrUpdateDigblockValue(System.String,System.Double,System.String,System.Int32)">
	<summary>
 Adds or updates a digblock value record.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="fieldValue">The field value.</param>
	<param name="digblockFieldId">The digblock field id. Max length of 31.</param>
	<param name="orderNo">The order no.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.CloseDigblock(System.String,System.DateTime,System.String,System.Int16,System.Int16)">
	<summary>
 Closes a digblock record.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="closeDate">The close date.</param>
	<param name="closeShift">The close shift.</param>
	<param name="haulageRawResolveAll">Specifies if all haulages are to be resolved. </param>
	<param name="autoOpenDigblock">Specifies if digblocks are automatically opened. </param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.CreateDigblockLocationFilterTable">
	<summary>
 Creates the temporary digblock location filter table to be used by the GetDigblockList call.
 </summary>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.DeleteDigblock(System.String)">
	<summary>
 Deletes a digblock record.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.DeleteDigblockPolygon(System.String)">
	<summary>
 Deletes a digblock polygon record.
 </summary>
	<param name="digblockId">The digblock id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.DropDigblockLocationFilterTable">
	<summary>
 Drop the temporary digblock location filter table used by GetDigblockList.
 </summary>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockDetails(System.String)">
	<summary>
 Returns a digblock record.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetAttributesForDigblockByDigblockId(System.String)">
	<summary>
 Returns a Attribute list of digblock 
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblock(System.String,System.Int16)">
	<summary>
 Returns a digblock record.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblock(System.String)">
	<summary>
 Returns a digblock record.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockExists(System.String)">
	<summary>
 Returns true or false whether or not a digblock exists.
 </summary>
	<param name="digblockId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockDetailList(System.String,System.Int16,System.Int16)">
	<summary>
 Returns a list of digblock detail records.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="includeBlockModels">Include the block models in the list.</param>
	<param name="includeMinePlans">Include the mine plans in the list.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockDetailList(System.String,System.Int16,System.Int16,System.Int16)">
	<summary>
 Returns a list of digblock detail records.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="includeBlockModels">Include the block models in the list.</param>
	<param name="includeMinePlans">Include the mine plans in the list.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockFieldList">
	<summary>
 Returns a list of digblock fields.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockHaulageList(System.String,System.DateTime,System.DateTime,System.Int32)">
	<summary>
 Returns a list of digblock haulage records.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="filterStartDate">The filter start date.</param>
	<param name="filterEndDate">The filter end date.</param>
	<param name="filterNo">The filter no.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockHaulageOverRange(System.Int32,System.DateTime,System.DateTime)">
	<summary>
 Returns a list of digblock haulage records within a range for a location.
 </summary>
	<param name="locationId">The location id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.DoesDigblockHaveHaulage(System.String)">
	<summary>
 Returns whether or not the specified digblock has haulage.
 </summary>
	<param name="digblockId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetGradeListForDigblock(System.String)">
	<summary>
 Returns the Grade list for the given DigblockId
 </summary>
	<param name="digblockId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.DoesDigblockHaveSurvey(System.String)">
	<summary>
 Returns whether or not the specified digblock has survey data.
 </summary>
	<param name="digblockId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockIdList">
	<summary>
 Returns a list of the digblock ids.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockList(System.Int32,System.String,System.Int32,System.DateTime,System.DateTime,System.Int16,System.Int16,System.Int16,System.Int16,System.Int32,System.Int16)">
	<summary>
 Returns a list of digblock records based on filters specified.
 </summary>
	<param name="filterNo">The filter no.</param>
	<param name="filterDigblockId">The filter digblock id. Max length of 31.</param>
	<param name="filterMaterialTypeId">The filter material type id.</param>
	<param name="filterStartDateFrom">The filter start date from.</param>
	<param name="filterStartDateTo">The filter start date to.</param>
	<param name="filterLocationIdList">Specifies if the results are filtered on location.</param>
	<param name="filterExcludeVirtualFieldData">Specifies if virtual field data are excluded.</param>
	<param name="filterExcludeGradeData">Specifies if grade data are excluded.</param>
	<param name="filterExcludeLocationData">Specifies if location data are excluded.</param>
	<param name="recordLimit">Number of records to limit returned dataset for faster processing.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockLocation(System.String)">
	<summary>
 Returns a digblock location record.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockMinePlanTonnesOverPeriod(System.Int32,System.Int32,System.Int32,System.DateTime,System.DateTime)">
	<summary>
 Returns digblock mine plan tonnes over a specified period.
 </summary>
	<param name="locationId">The location id.</param>
	<param name="minePlanId">The mine plan id.</param>
	<param name="minePlanTypeId">The mine plan type id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockModelBlockTonnesOverPeriod(System.Int32,System.Int32)">
	<summary>
 Returns digblock model block tonnes for a specified location.
 </summary>
	<param name="locationId">The location id.</param>
	<param name="blockModelId">The block model id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockPolygonList(System.String,System.Int32)">
	<summary>
 Returns a list of digblock polygon records.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<param name="locationId">The location id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockReconciledTonnesOverPeriod(System.Int32,System.DateTime,System.DateTime)">
	<summary>
 Returns the digblock reconciled tonnes over specified a period and location.
 </summary>
	<param name="locationId">The location id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockSurveyTonnesOverPeriod(System.Int32,System.DateTime,System.DateTime)">
	<summary>
 Returns the digblock survey tonnes over a specified period and location.
 </summary>
	<param name="locationId">The location id.</param>
	<param name="startDate">The start date.</param>
	<param name="endDate">The end date.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockSurveyTypeList(System.Int32,System.Int16)">
	<summary>
 Returns a list digblock survey type records.
 </summary>
	<param name="digblockSurveyTypeId">The digblock survey type id.</param>
	<param name="isVisible"></param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetShiftTypeList">
	<summary>
 Returns a list of shift type records.
 </summary>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.UpdateDigblock(System.String,System.String,System.Int32,System.DateTime,System.String,System.DateTime,System.String,System.Int16,System.Double,System.Double,System.Double,System.Double,System.String,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
	<summary>
 Updates a digblock's details.
 </summary>
	<param name="digblockId">The id of the digblock</param>
	<param name="description"> The description of the digblock </param>
	<param name="materialTypeId"></param>
	<param name="startDate"></param>
	<param name="startShift"></param>
	<param name="endDate"></param>
	<param name="endShift"></param>
	<param name="isInPitDepletion"></param>
	<param name="startTonnes"></param>
	<param name="x"></param>
	<param name="y"></param>
	<param name="z"></param>
	<param name="notes"></param>
	<param name="haulageRawResolveAll"></param>
	<param name="updateDescription"></param>
	<param name="updateMaterialType"></param>
	<param name="updateStartDate"></param>
	<param name="updateStartShift"></param>
	<param name="updateEndDate"></param>
	<param name="updateEndShift"></param>
	<param name="updateIsInPitDepletion"></param>
	<param name="updateStartTonnes"></param>
	<param name="updateX"></param>
	<param name="updateY"></param>
	<param name="updateZ"></param>
	<param name="updateNotes"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.DeleteDigblockLocation(System.String)">
	<summary>
 Deletes all locations for the specified digblock.
 </summary>
	<param name="digblockId">The digblock's id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockModelBlockList(System.String,System.Int32)">
	<summary>
 Returns a list of digblock / model block link records.
 </summary>
	<param name="digblockId">The digblock's id - note that this is nullable.</param>
	<param name="modelBlockId">The model block's id - note that this is nullable.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDataTransactionTonnesFlowDetails(System.Int64)">
	<summary>
 Returns the flow chain for a Data Transaction Tonnes record.
 </summary>
	<param name="dataTransactionTonnesId">The DTT record id to look up in DTTF.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDigblock.GetDigblockTransactionList(System.String,System.DateTime,System.DateTime)">
	<summary>
 Get all transactions related to a particular digblock tracking it as far as it can.
 </summary>
	<param name="digblockId">The digblock id you are looking up.</param>
	<param name="startDate">Transaction date filter.</param>
	<param name="endDate">Transaction date filter..</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.IsDigblockSurveyApproved(System.DateTime,System.String,System.Int32)">
	<summary>
 Returns whether the survey date, shift and type is approved
 </summary>
	<param name="digblockSurveyDate"></param>
	<param name="digblockSurveyShift"></param>
	<param name="digblockSurveyTypeId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.IsDigblockSurveyIdApproved(System.Int32)">
	<summary>
 Returns whether the digblock survey id was approved
 </summary>
	<param name="digblockSurveyId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.AddOrUpdateDigblockSurveySummary(System.Int32,System.String)">
	<summary>
 Adds or updates the Digblock Survey Summary record. Does not update cached aggregates.
 </summary>
	<param name="digblockSurveyId"></param>
	<param name="digblockId"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.AddOrUpdateDigblockSurveySampleNotes(System.Int32,System.String,System.String)">
	<summary>
 Adds or Update Digblock Survey Sample Notes
 </summary>
	<param name="digblockSurveySampleId"></param>
	<param name="digblockSurveySampleFieldId"></param>
	<param name="notes"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.AddOrUpdateDigblockSurveySampleValue(System.Int32,System.String,System.Single)">
	<summary>
 Adds or Updates Digblock Survey Sample Value
 </summary>
	<param name="digblockSurveySampleId"></param>
	<param name="digblockSurveySampleFieldId"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.AddOrUpdateDigblockSurveyActualNotes(System.Int32,System.String,System.String)">
	<summary>
 Adds or Update Digblock Actual Sample Notes
 </summary>
	<param name="digblockSurveySampleId"></param>
	<param name="digblockSurveySampleFieldId"></param>
	<param name="notes"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.AddOrUpdateDigblockSurveyActualValue(System.Int32,System.String,System.Single)">
	<summary>
 Adds or Updates Digblock Actual Sample Value
 </summary>
	<param name="digblockSurveySampleId"></param>
	<param name="digblockSurveySampleFieldId"></param>
	<param name="value"></param>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.AddDigblockSurvey(System.DateTime,System.String,System.Int16,System.Int16,System.Int32,System.Int16)">
	<summary>
 Adds a digblock survey record.
 </summary>
	<param name="digblockSurveyDate">The digblock survey date.</param>
	<param name="digblockSurveyShift">The digblock survey shift.</param>
	<param name="adjustHaulage">Determines if the haulage should be adjusted. </param>
	<param name="includePreviousDigblocks">Determines previous digblocks are included. </param>
	<param name="digblockSurveyTypeId">The digblock survey type id.</param>
	<param name="isEntireDigblock">Specifies if this record represents the entire digblock. </param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.AddDigblockSurveyActual(System.Int32,System.Double,System.String,System.String,System.Int32,System.Int16)">
	<summary>
 Adds a digblock survey actual record and returns its ID.
 </summary>
	<param name="digblockSurveySummaryId">The digblock survey summary id.</param>
	<param name="tonnes">The weight of the digblock in tonnes.</param>
	<param name="description">A brief description. Max length of 63.</param>
	<param name="assignedDigblockId">The assigned digblock id. Max length of 31.</param>
	<param name="digblockSurveyActualId">The digblock survey actual id.</param>
	<param name="isRill">Specifies if this record is a rill or not. </param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.ApproveDigblockSurvey(System.Int32)">
	<summary>
 Modifies a digblock survey record's status to Approved.
 </summary>
	<param name="digblockSurveyId">The digblock survey id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.DeleteDigblockSurvey(System.Int32)">
	<summary>
 Deletes a digblock survey record.
 </summary>
	<param name="digblockSurveyId">The digblock survey id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.DeleteDigblockSurveyActual(System.Int32)">
	<summary>
 Deletes a digblock survey actual record.
 </summary>
	<param name="digblockSurveyActualId">The digblock survey actual id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetApprovedDigblockSurveyList(System.Int32)">
	<summary>
 Returns a list of approved digblock survey records.
 </summary>
	<param name="digblockSurveyTypeId">The digblock survey type id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDepletionDigblockTonnesAndGradeSummary(System.String,System.Int32)">
	<summary>
 Returns a list of depletion digblock weights and grade summary records.
 </summary>
	<param name="digblockId">The digblock id.</param>
	<param name="digblockSurveyId">The digblock survey id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDepletionDigblockTonnesAndGradeSummary(System.String,System.Int32,System.Int16)">
	<summary>
 Returns a list of depletion digblock weights and grade summary records.
 </summary>
	<param name="digblockId">The digblock id.</param>
	<param name="digblockSurveyId">The digblock survey id. Max length of 31.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDigblockPolygonList(System.String)">
	<summary>
 Returns a list of digblock polygon records.
 </summary>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDigblockPolygonWithinRange(System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
	<summary>
 Returns a list of digblock polygon records that matches the given range.
 </summary>
	<param name="maxX">The max X.</param>
	<param name="minX">The min X.</param>
	<param name="maxY">The max Y.</param>
	<param name="minY">The min Y.</param>
	<param name="z">The z.</param>
	<param name="digblockId">The digblock id. Max length of 31.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDigblockSurveyActualForDigblock(System.Int32,System.String)">
	<summary>
 Returns the list of haulage assignments made for that digblock over
 a digblock survey period.
 </summary>
	<param name="digblockSurveyId">The digblock survey id.</param>
	<param name="digblockId">The digblock id to retrieve records for.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDigblockSurveyActualList(System.Int32)">
	<summary>
 Returns a list of digblock survey actual records.
 </summary>
	<param name="digblockSurveySummaryId">The digblock survey summary id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDigblockSurvey(System.Int32)">
	<summary>
 Returns a single digblock survey record.
 </summary>
	<param name="digblockSurveyId">The digblock survey id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDigblockSurveyList(System.Int32)">
	<summary>
 Returns a list of digblock survey records.
 </summary>
	<param name="digblockSurveyTypeId">The digblock survey type id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDigblockSurveySummary(System.Int32,System.String)">
	<summary>
 Returns the raw summary information with no cached tonnage values.
 </summary>
	<param name="digblockSurveySummaryId">The digblock survey summary id</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDigblockSurveySummaryList(System.Int32,System.String)">
	<summary>
 Returns a list of digblock survey summary records.
 </summary>
	<param name="digblockSurveyId">The digblock survey id.</param>
	<param name="ntLogin">The NT login. Max length of 255.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDigblockSurveySummaryRecord(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@,System.String)">
	<summary>
 Returns a list of digblock survey summary records.
 </summary>
	<param name="digblockSurveySummaryId">The digblock survey summary id.</param>
	<param name="previousRecordId">The previous record id.</param>
	<param name="nextRecordId">The next record id.</param>
	<param name="noRecords">The number of records found.</param>
	<param name="tonnesPerTruck">The weight in tonnes, per truck.</param>
	<param name="maxTonnes">The max tonnes.</param>
	<param name="aveTonnes">The ave tonnes.</param>
	<param name="minTonnes">The min tonnes.</param>
	<param name="ntLogin">The NT login. Max length of 255.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDigblockSurveySummaryRecord(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@,System.String,System.Int16)">
	<summary>
 Returns a list of digblock survey summary records.
 </summary>
	<param name="digblockSurveySummaryId">The digblock survey summary id.</param>
	<param name="previousRecordId">The previous record id.</param>
	<param name="nextRecordId">The next record id.</param>
	<param name="noRecords">The number of records found.</param>
	<param name="tonnesPerTruck">The weight in tonnes, per truck.</param>
	<param name="maxTonnes">The max tonnes.</param>
	<param name="aveTonnes">The ave tonnes.</param>
	<param name="minTonnes">The min tonnes.</param>
	<param name="ntLogin">The NT login. Max length of 255.</param>
	<param name="gradeVisibility">Determines what grades to show, null for all, true for visible, false for invisible.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetFirstDigblockSurveySummaryRecord(System.DateTime,System.String,System.Int32@,System.Int32@,System.Int32@,System.Double@,System.Double@,System.Double@,System.Double@,System.String,System.Int32)">
	<summary>
 Returns the first digblock survey summary record.
 </summary>
	<param name="digblockSurveyDate">The digblock survey date.</param>
	<param name="digblockSurveyShift">The digblock survey shift.</param>
	<param name="previousRecordId">The previous record id.</param>
	<param name="nextRecordId">The next record id.</param>
	<param name="noRecords">The number of records returned.</param>
	<param name="tonnesPerTruck">The weight in tonnes, per truck.</param>
	<param name="maxTonnes">The max tonnes.</param>
	<param name="aveTonnes">The ave tonnes.</param>
	<param name="minTonnes">The min tonnes.</param>
	<param name="ntLogin">The NT login. Max length of 255.</param>
	<param name="digblockSurveyTypeId">The digblock survey type id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetUnapprovedDigblockSurveyList(System.Int32)">
	<summary>
 Returns a list of unapproved digblock survey records.
 </summary>
	<param name="digblockSurveyTypeId">The digblock survey type id.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.GetDigblockSurveySummaryTonnesForDigblock(System.String)">
	<summary>
 Returns the recalculated tonnes and assigned tonnes for a digblock 
 within the depletion date ranges it falls under.
 </summary>
	<param name="digblockId">The digblock id</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.InitDigblockSurveyProcess(System.Int32)">
	<summary>
 Initialises a digblock survey process.
 </summary>
	<param name="digblockSurveyId">The digblock survey id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.ResetDigblockSurveySummaryOwnership(System.DateTime,System.String,System.String,System.Int32)">
	<summary>
 Resets the digblock survey summary ownership.
 </summary>
	<param name="digblockSurveyDate">The digblock survey date.</param>
	<param name="digblockSurveyShift">The digblock survey shift.</param>
	<param name="ntLogin">The NT login. Max legnth of 255</param>
	<param name="digblockSurveyTypeId">The digblock survey type id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.UnapproveDigblockSurvey(System.Int32)">
	<summary>
 Modifies a digblock survey record's status to Unapproved.
 </summary>
	<param name="digblockSurveyId">The digblock survey id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IDepletion.UpdateDigblockSurveySummaryUser(System.Int32,System.String)">
	<summary>
 Updates the digblock survey summary user.
 </summary>
	<param name="digblockSurveySummaryId">The digblock survey summary id.</param>
	<param name="ntLogin">The NT login. Max length of 255.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IBlockModel.GetBlockModelList(System.Int32,System.String,System.Int16)">
	<summary>
 Returns a list of Block Modes.
 </summary>
	<param name="blockModelTypeId">The block model type id.</param>
	<param name="blockModelName">The block model name. Must be an exact match.</param>
	<param name="isDisplayed">Determines whether or not to show visible or invisible block models. 
 Pass null to recieve both.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IBlockModel.GetBlockModelTypeList(System.Int32,System.String)">
	<summary>
 Returns a list of Block Model Types.
 </summary>
	<param name="blockModelTypeId">The block model type id.</param>
	<param name="name">The name of the block model type.</param>
	<returns></returns>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IBlockModel.GetModelBlockId(System.Int32,System.String,System.Double,System.Double,System.Double,System.Int32)">
	<summary>
 Returns the ModelBlockId looking up the BlockModelId and the Code
 </summary>
	<param name="blockModelId">Block model id to filter on.</param>
	<param name="code">Model block code to filter on.</param>
	<param name="x">X coordinate to filter on.</param>
	<param name="y">Y coordinate to filter on.</param>
	<param name="z">Z coordinate to filter on.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IBlockModel.GetModelBlockList(System.Int32,System.Int32,System.String)">
	<summary>
 Returns a list of model blocks. Filter as required.
 </summary>
	<param name="blockModelId">Block model id to filter on.</param>
	<param name="blastBlockId">Blast block id to filter on.</param>
	<param name="code">Model block code to filter on.</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IBlockModel.GetModelBlockPartialList(System.Int32,System.Int32)">
	<summary>
 Returns a list of model block partial records.
 </summary>
	<param name="modelBlockId">The Model Block id.  Required.</param>
	<param name="sequenceNo">The sequence number that is required.  Optional.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IBlockModel.AddOrUpdateModelBlockLocation(System.Int32,System.Int16,System.Int32)">
	<summary>
 Adds or updates model block location record.
 </summary>
	<param name="modelBlockId">The model block id.</param>
	<param name="locationTypeId">The location type id.</param>
	<param name="locationId">The location id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IBlockModel.GetModelBlockLocation(System.Int32)">
	<summary>
 Provides a full location breakdown of the given model block.
 </summary>
	<param name="modelBlockId">The model block id.</param>
</member><member name="M:Snowden.Reconcilor.Core.Database.DalBaseObjects.IBlockModel.DeleteModelBlockLocation(System.Int32)">
	<summary>
 Deletes the location details for a specified model block record.
 </summary>
	<param name="modelBlockId">The model block id.</param>
</member>
</members>
</doc>