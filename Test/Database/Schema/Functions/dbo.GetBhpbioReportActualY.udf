IF Object_Id('dbo.GetBhpbioReportActualY') IS NOT NULL
	DROP FUNCTION dbo.GetBhpbioReportActualY
GO

CREATE FUNCTION dbo.GetBhpbioReportActualY
(
	@iDateFrom DATETIME,
	@iDateTo DATETIME,
	@iDateBreakdown VARCHAR(31),
	@iLocationId INT,
	@iGetChildLocations BIT,
	@iIncludeLiveData BIT,
	@iIncludeApprovedData BIT
)
RETURNS @Y TABLE
(
	CalendarDate DATETIME NOT NULL,
	DateFrom DATETIME NOT NULL,
	DateTo DATETIME NOT NULL,
	DesignationMaterialTypeId INT NOT NULL,
	LocationId INT NULL,
	ProductSize VARCHAR(5) NULL,
	Attribute INT NULL,
	Value FLOAT NULL
)
WITH ENCRYPTION
AS
BEGIN

	DECLARE @YIntermediate TABLE
	(
		CalendarDate DATETIME NOT NULL,
		DateFrom DATETIME NOT NULL,
		DateTo DATETIME NOT NULL,
		DesignationMaterialTypeId INT NOT NULL,
		LocationId INT NULL,
		ProductSize VARCHAR(5) NULL,
		Attribute INT NULL,
		Value FLOAT NULL,
		AssociatedTonnes FLOAT NULL
	)
	-- 'y' - pit to pre-crusher stockpiles
	-- the material types must be reported accurately

	DECLARE @Haulage TABLE
	(
		CalendarDate DATETIME NOT NULL,
		HaulageId INT NOT NULL,
		DateFrom DATETIME NOT NULL,
		DateTo DATETIME NOT NULL,
		ParentLocationId INT NULL,
		ProductSize VARCHAR(5) NOT NULL,
		Tonnes FLOAT NOT NULL,
		DesignationMaterialTypeId INT NOT NULL,
		PRIMARY KEY (HaulageId, ProductSize)
	)
	
	DECLARE @Location TABLE
	(
		LocationId INT NOT NULL,
		ParentLocationId INT NULL,
		IncludeStart DATETIME NOT NULL,
		IncludeEnd DATETIME NOT NULL
	    PRIMARY KEY (LocationId, IncludeStart)
	)

	-- setup the Locations
	INSERT INTO @Location
		(LocationId, ParentLocationId, IncludeStart, IncludeEnd)
	SELECT LocationId, ParentLocationId, IncludeStart, IncludeEnd
	FROM dbo.GetBhpbioReportLocationBreakdownWithOverride(@iLocationId, @iGetChildLocations, NULL, @iDateFrom, @iDateTo)

	IF @iIncludeLiveData = 1
	BEGIN
		-- retrieve the list of Haulage Records to be used in the calculations
		INSERT INTO @Haulage
			(CalendarDate, DateFrom, DateTo, HaulageId, ParentLocationId, ProductSize, Tonnes, DesignationMaterialTypeId)
		SELECT DISTINCT rd.CalendarDate, rd.DateFrom, rd.DateTo, h.Haulage_Id, l.ParentLocationId, defaultlf.ProductSize, 
			ISNULL(haulagelf.[Percent], defaultlf.[Percent]) * h.Tonnes,
			destinationStockpile.MaterialTypeId
		FROM dbo.GetBhpbioReportBreakdown(@iDateBreakdown, @iDateFrom, @iDateTo, 1) AS rd
			INNER JOIN dbo.Haulage AS h
				ON (h.Haulage_Date BETWEEN rd.DateFrom AND rd.DateTo)
			INNER JOIN dbo.GetBhpbioReportHauledBlockLocations(@iDateFrom, @iDateTo) dl
				ON (dl.DigblockId = h.Source_Digblock_Id)
			INNER JOIN @Location AS l
				ON (l.LocationId = dl.PitLocationId and h.haulage_date between l.IncludeStart and l.IncludeEnd)
			-- join to the destination stockpile
			INNER JOIN
				(
					SELECT sl2.Stockpile_Id, sgd2.MaterialTypeId
					FROM dbo.BhpbioStockpileGroupDesignation AS sgd2
						INNER JOIN dbo.StockpileGroupStockpile AS sgs2
							ON (sgs2.Stockpile_Group_Id = sgd2.StockpileGroupId)
						INNER JOIN dbo.StockpileLocation AS sl2
							ON (sl2.Stockpile_Id = sgs2.Stockpile_Id)
				) AS destinationStockpile
				ON (destinationStockpile.Stockpile_Id = h.Destination_Stockpile_Id)
			INNER JOIN dbo.GetBhpbioDefaultLumpFinesRatios(null, null, 1) defaultlf
				ON dl.PitLocationId = defaultlf.LocationId
				AND h.Haulage_Date BETWEEN defaultlf.StartDate AND defaultlf.EndDate
			LEFT JOIN dbo.GetBhpbioHaulageLumpFinesPercent(@iDateFrom, @iDateTo) haulagelf
				ON H.Haulage_Id = haulagelf.HaulageId
				AND defaultlf.ProductSize = haulagelf.ProductSize
			LEFT JOIN dbo.GetBhpbioFilteredMaterialTypes(1,null) hgmt
				ON hgmt.MaterialTypeId = destinationStockpile.MaterialTypeId
			LEFT OUTER JOIN dbo.GetBhpbioExcludeStockpileGroup('ActualY') xs
				ON xs.StockpileId = h.Source_Stockpile_Id
				OR xs.StockpileId = h.Destination_Stockpile_Id
		WHERE h.Haulage_State_Id IN ('N', 'A')
			-- don't include lump/fines portion if zero percent
			AND ISNULL(haulagelf.[Percent], defaultlf.[Percent]) > 0
			AND h.Child_Haulage_Id IS NULL
			AND h.Source_Digblock_Id IS NOT NULL
			AND xs.StockpileId IS NULL -- No movements to or from excluded groups.
			-- filter out data for approved periods IF we are also retrieving Approved data in this call
			AND NOT (
				@iIncludeApprovedData = 1
				AND EXISTS (
						SELECT bad.TagId
						FROM dbo.BhpbioApprovalData bad
							INNER JOIN dbo.BhpbioReportDataTags brdt
							ON brdt.TagId = bad.TagId
						WHERE	bad.LocationId = dl.PitLocationId
							AND bad.ApprovedMonth BETWEEN l.IncludeStart and l.IncludeEnd
							AND bad.ApprovedMonth = dbo.GetDateMonth(h.Haulage_Date)
							
							AND
							(
								(	bad.TagId = 'F1Factor'
									AND hgmt.MaterialTypeId IS NOT NULL	)
								OR 
								(	bad.TagId like 'Other%'
									AND destinationStockpile.MaterialTypeId = brdt.OtherMaterialTypeId )
							)
						)
					)
				

		-- return the TONNES values for individual lump and fines
		INSERT INTO @YIntermediate
			(CalendarDate, DateFrom, DateTo, DesignationMaterialTypeId, ProductSize, LocationId, Attribute, Value)
		SELECT CalendarDate, DateFrom, DateTo, DesignationMaterialTypeId, ProductSize, ParentLocationId, 0, SUM(Tonnes)
		FROM @Haulage
		GROUP BY CalendarDate, DateFrom, DateTo, DesignationMaterialTypeId, ParentLocationId, ProductSize

		DECLARE @HaulageLumpFinesGrade TABLE
		(
			HaulageId Int Not Null,
			ProductSize Varchar(5) Not Null,
			GradeId SmallInt Not Null,
			GradeValue Float Not Null,
			
			PRIMARY KEY (HaulageId, ProductSize, GradeId)
		)

		INSERT INTO @HaulageLumpFinesGrade
		SELECT h.Haulage_Id, LFG.ProductSize, LFG.GRadeId, LFG.GradeValue
		FROM dbo.GetBhpbioHaulageLumpFinesGrade(@iDateFrom, @iDateTo) LFG
		INNER JOIN Haulage h ON h.Haulage_Raw_Id = LFG.HaulageRawId

		-- return the GRADES values for individual lump and fines
		INSERT INTO @YIntermediate
			(CalendarDate, DateFrom, DateTo, DesignationMaterialTypeId, ProductSize, LocationId, Attribute, Value, AssociatedTonnes)
		SELECT h.CalendarDate, h.DateFrom, h.DateTo, h.DesignationMaterialTypeId, h.ProductSize, h.ParentLocationId,
			g.Grade_Id, SUM(h.Tonnes * ISNULL(LFG.GradeValue, hg.Grade_Value)) / NULLIF(SUM(h.Tonnes), 0.0), SUM(h.Tonnes)
		FROM @Haulage AS h
			-- add the grades
			CROSS JOIN dbo.Grade AS g
			LEFT JOIN dbo.HaulageGrade AS hg
				ON (h.HaulageId = hg.Haulage_Id
					AND g.Grade_Id = hg.Grade_Id)
			LEFT JOIN @HaulageLumpFinesGrade LFG
				ON (LFG.HaulageId = h.HaulageId
					AND LFG.ProductSize = h.ProductSize
					AND LFG.GradeId = g.Grade_Id)
		GROUP BY h.CalendarDate, h.DateFrom, h.DateTo, g.Grade_Id, h.DesignationMaterialTypeId, h.ParentLocationId, h.ProductSize
		OPTION (RECOMPILE)
		
	END
	
	-- if including approved data
	IF @iIncludeApprovedData = 1
	BEGIN
		-- Determine the SummaryEntryTypeIds for the appropriate types (ActualY and ActualOMToStockpile)
		-- Both these types are need to include movements of all material types
		DECLARE @actualYSummaryEntryTypeId INTEGER
		DECLARE @otherToStockpileSummaryEntryTypeId INTEGER
		
		SELECT @actualYSummaryEntryTypeId = bset.SummaryEntryTypeId 
		FROM dbo.BhpbioSummaryEntryType bset
		WHERE bset.Name = 'ActualY'
		
		SELECT @otherToStockpileSummaryEntryTypeId = bset.SummaryEntryTypeId 
		FROM dbo.BhpbioSummaryEntryType bset
		WHERE bset.Name = 'ActualOMToStockpile'
		
		-- Retrieve Tonnes
		INSERT INTO @YIntermediate
			(CalendarDate, DateFrom, DateTo, DesignationMaterialTypeId, ProductSize, LocationId, Attribute, Value)
		SELECT B.CalendarDate AS CalendarDate, B.DateFrom, B.DateTo, bse.MaterialTypeId, bse.ProductSize, l.ParentLocationId, 0,  SUM(bse.Tonnes) AS Tonnes
		FROM dbo.GetBhpbioReportBreakdown(@iDateBreakdown, @iDateFrom, @iDateTo, 1 /* do not include data before start date */) AS B
			INNER JOIN dbo.BhpbioSummary s WITH (NOLOCK)
				ON s.SummaryMonth >= B.DateFrom AND s.SummaryMonth < B.DateTo
			INNER JOIN dbo.BhpbioSummaryEntry AS bse WITH (NOLOCK)
				ON bse.SummaryId = s.SummaryId
				AND (bse.SummaryEntryTypeId IN (@actualYSummaryEntryTypeId, @otherToStockpileSummaryEntryTypeId))
			INNER JOIN @Location l
				ON l.LocationId = bse.LocationId
				AND s.SummaryMonth BETWEEN l.IncludeStart AND l.IncludeEnd		/* Added for hierarchy change */
		GROUP BY B.CalendarDate, B.DateFrom, B.DateTo, bse.MaterialTypeId, l.ParentLocationId, bse.ProductSize

		-- Retrieve Grades
		INSERT INTO @YIntermediate
			(CalendarDate, DateFrom, DateTo, DesignationMaterialTypeId, ProductSize, LocationId, Attribute, Value, AssociatedTonnes)
		SELECT B.CalendarDate AS CalendarDate, B.DateFrom, B.DateTo, bse.MaterialTypeId, bse.ProductSize, l.ParentLocationId, 
			bseg.GradeId,
			SUM(bse.Tonnes * bseg.GradeValue) / SUM(bse.Tonnes) As GradeValue, SUM(bse.Tonnes)
		FROM dbo.GetBhpbioReportBreakdown(@iDateBreakdown, @iDateFrom, @iDateTo, 1 /* do not include data before start date */) AS B
			INNER JOIN dbo.BhpbioSummary s WITH (NOLOCK)
				ON s.SummaryMonth >= B.DateFrom AND s.SummaryMonth < B.DateTo
			INNER JOIN dbo.BhpbioSummaryEntry AS bse WITH (NOLOCK)
				ON bse.SummaryId = s.SummaryId
				AND (bse.SummaryEntryTypeId IN (@actualYSummaryEntryTypeId, @otherToStockpileSummaryEntryTypeId))
			INNER JOIN @Location l
				ON l.LocationId = bse.LocationId 
				AND s.SummaryMonth BETWEEN l.IncludeStart AND l.IncludeEnd		/* Added for hierarchy change */
			INNER JOIN dbo.BhpbioSummaryEntryGrade AS bseg WITH (NOLOCK)
				ON bseg.SummaryEntryId = bse.SummaryEntryId
		GROUP BY B.CalendarDate, B.DateFrom, B.DateTo, bse.MaterialTypeId, l.ParentLocationId, bseg.GradeId, bse.ProductSize
	END
	
		-- insert tonnes into the combined table
	INSERT INTO @Y
		(CalendarDate, DateFrom, DateTo, DesignationMaterialTypeId, ProductSize, LocationId, Attribute, Value)
	SELECT yi.CalendarDate, yi.DateFrom, yi.DateTo, yi.DesignationMaterialTypeId, yi.ProductSize,
		yi.LocationId, yi.Attribute, SUM(yi.Value)
	FROM @YIntermediate AS yi
	WHERE yi.Attribute = 0
	GROUP BY  yi.CalendarDate, yi.DateFrom, yi.DateTo, yi.DesignationMaterialTypeId, yi.LocationId, yi.Attribute, yi.ProductSize
	
	-- insert grades into the combined table
	INSERT INTO @Y
		(CalendarDate, DateFrom, DateTo, DesignationMaterialTypeId, ProductSize, LocationId, Attribute, Value)
	SELECT yi.CalendarDate, yi.DateFrom, yi.DateTo, yi.DesignationMaterialTypeId, yi.ProductSize,
		yi.LocationId, yi.Attribute, SUM(yi.Value * yi.AssociatedTonnes) / SUM(yi.AssociatedTonnes)
	FROM @YIntermediate AS yi
	WHERE yi.Attribute > 0
	GROUP BY  yi.CalendarDate, yi.DateFrom, yi.DateTo, yi.DesignationMaterialTypeId, yi.LocationId, yi.Attribute, yi.ProductSize
	
	
	RETURN
END
GO
